(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{419:function(e,t,v){"use strict";v.r(t);var n=v(2),c=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"一、前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[e._v("#")]),e._v(" 一、前言")]),e._v(" "),t("p",[e._v("响应系统是"),t("code",[e._v("Vue.js")]),e._v("的重要组成部分，一起来研究下")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("讨论什么是响应式数据和副作用函数，然后尝试实现一个相对完善的响应系统。")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("可能遇到的问题：")]),e._v(" "),t("ul",[t("li",[e._v("如何避免无限递归？")]),e._v(" "),t("li",[e._v("为什么需要嵌套的副作用函数？")]),e._v(" "),t("li",[e._v("两个副作用函数之间会产生哪些影响？")]),e._v(" "),t("li",[e._v("以及其他很多需要考虑的细节")])])])])]),e._v(" "),t("li",[t("p",[e._v("详细讨论与响应式数据相关的内容。")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("Vue.js 3")]),e._v("采用"),t("code",[e._v("Proxy")]),e._v("实现响应式数据， 这涉及语言规范层面的只是。")]),e._v(" "),t("ul",[t("li",[e._v("包括如何根据语言规范实现对数据对象的代理")]),e._v(" "),t("li",[e._v("以及其中的一些重要细节")])])])])])]),e._v(" "),t("p",[e._v("接下来从认识响应式数据和副作用函数开始，一步一步地了解响应式系统的设计与实现。")]),e._v(" "),t("h1",{attrs:{id:"二、本章内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、本章内容"}},[e._v("#")]),e._v(" 二、本章内容")]),e._v(" "),t("h2",{attrs:{id:"_2-1-响应式数据与副作用函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-响应式数据与副作用函数"}},[e._v("#")]),e._v(" 2.1 响应式数据与副作用函数")]),e._v(" "),t("p",[t("strong",[e._v("副作用函数指的是会产生副作用的函数")]),e._v("，如下代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function effect(){\n  document.body.innerText = 'hello vue3'\n}\n")])])]),t("p",[e._v("当"),t("code",[e._v("effect")]),e._v("函数执行时，它会设置"),t("code",[e._v("body")]),e._v("的文本内容， 但除了"),t("code",[e._v("effect")]),e._v("函数之外的任何函数都可以读取或设置"),t("code",[e._v("body")]),e._v("的文本内容。 也就是，"),t("code",[e._v("effect")]),e._v("函数的执行会直接或间接的影响其他函数的执行，这时我们说"),t("code",[e._v("effect")]),e._v("函数产生了副作用。")]),e._v(" "),t("p",[t("strong",[e._v("副作用很容易产生，例如一个函数修改了全局变量，这其实也是一个副作用函数")]),e._v("，如下代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//全局变量\nlet val = 1\n\nfunction effect(){\n  val = 2 //修改全局变量，产生副作用\n}\n")])])]),t("p",[e._v("理解了什么是副作用函数，再来说说什么是响应式数据。假设在一个副作用函数中读取了某个对象的属性：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const obj = {text:'hello world'}\nfunction effect(){\n  // effect函数的执行会读取 obj.text\n  document.body.innerText = obj.text\n}\n")])])]),t("p",[e._v("如上面代码所示，副作用函数"),t("code",[e._v("effect")]),e._v("会设置"),t("code",[e._v("body")]),e._v("元素的"),t("code",[e._v("innerText")]),e._v("属性，其值为 "),t("code",[e._v("obj.text")]),e._v("，当"),t("code",[e._v("obj.text")]),e._v("的值发生变化时，我们希望副作用函数 "),t("code",[e._v("effect")]),e._v("会重新执行：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("obj.text = 'hello vue3' //修改obj.text的值，同时希望副作用函数会重新执行\n")])])]),t("p",[e._v("这句代码修改了字符"),t("code",[e._v("obj.text")]),e._v(" 的值，我们希望当值变化后，副作用函数会自动重新执行，如果能实现这个目标，那么对象"),t("code",[e._v("obj")]),e._v("就是响应式数据。")]),e._v(" "),t("p",[e._v("但是很明显，以上面的代码来看，我们还做不到这一点，因为"),t("code",[e._v("obj")]),e._v("是一个普通对象，当我们修改它的值时，除了值本身发生变化之外，不会有任何其他反应。")]),e._v(" "),t("p",[e._v("接下来我们讨论"),t("strong",[e._v("如何让数据变成响应式数据。")])]),e._v(" "),t("h2",{attrs:{id:"_2-2-响应式数据的基本实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-响应式数据的基本实现"}},[e._v("#")]),e._v(" 2.2 响应式数据的基本实现")]),e._v(" "),t("p",[e._v("接着上文的思考，"),t("strong",[e._v("如何才能让")]),t("code",[e._v("obj")]),t("strong",[e._v("变成响应式数据呢？")]),e._v(" 通过观察我们能发现两点线索：")]),e._v(" "),t("ul",[t("li",[e._v("当副作用函数"),t("code",[e._v("effect")]),e._v("执行时，会触发字段"),t("code",[e._v("obj.text")]),e._v("的读取操作；")]),e._v(" "),t("li",[e._v("当修改"),t("code",[e._v("obj.text")]),e._v("的值时，会促发字段"),t("code",[e._v("obj.text")]),e._v("的设置操作。")])]),e._v(" "),t("p",[e._v("如果我们能拦截一个对象的读取和设置操作，事情就变得简单了，当读取字段"),t("code",[e._v("obj.text")]),e._v("时，我们可以把副作用函数"),t("code",[e._v("effect")]),e._v("存储到一个“桶”里，如下图1所示：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6702c106955740f4bb386ebc313fd65e~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),t("p",[e._v("接着，当设置"),t("code",[e._v("obj.text")]),e._v("时，再把副作用函数"),t("code",[e._v("effect")]),e._v('从"桶"里取出来并执行即可，如下图2所示：')]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8dd60c3a15fd4b299fefa30b39fc6a09~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),t("p",[e._v("现在问题的"),t("strong",[e._v("关键变成了我们如何才能拦截一个对象属性的读取和设置操作。")])]),e._v(" "),t("ul",[t("li",[e._v("在"),t("code",[e._v("ES2015")]),e._v("之前只能通过"),t("code",[e._v("Object.defineProperty")]),e._v("函数实现，这也是"),t("code",[e._v("Vue.js 2")]),e._v("所采用的方式。")]),e._v(" "),t("li",[e._v("在"),t("code",[e._v("ES2015+")]),e._v("中，我们可以使用代理对象"),t("code",[e._v("Proxy")]),e._v(" 来实现，这也是"),t("code",[e._v("Vue.js 3")]),e._v("所采用的方式。")])]),e._v(" "),t("p",[e._v("接下来，我们就根据上述思路，采用"),t("code",[e._v("Proxy")]),e._v("来实现:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 存储副作用函数的桶\nconst bucket = new Set()\n\n// 原始数据\nconst data = {text:'text hello'}\n//对原始数据的代理\nconst obj = new Proxy(data,{\n  //拦截读取操作\n  get(target,key){\n    // 将副作用函数effect添加到存储副作用函数的桶中\n    bucket.add(effect)\n    //返回属性值\n    return target[key]\n  },\n  //拦截设置操作\n  set(target,key,newVal){\n    // 设置属性值\n    target[key] = newVal\n    //把副作用函数从桶里取出来并执行\n    bucket.forEach(fn=> fn())\n    // 返回true代表设置操作成功\n    return true\n  }\n})\n")])])]),t("ul",[t("li",[t("p",[e._v("首先，我们创建了一个用于存储副作用函数的桶"),t("code",[e._v("bucket")]),e._v("，它是"),t("code",[e._v("Set")]),e._v("类型。")])]),e._v(" "),t("li",[t("p",[e._v("接着定义原始数据"),t("code",[e._v("data")]),e._v("，"),t("code",[e._v("obj")]),e._v("是原始数据的代理对象。")]),e._v(" "),t("ul",[t("li",[e._v("分别设置了"),t("code",[e._v("get")]),e._v(" 和 "),t("code",[e._v("set")]),e._v(" 拦截函数，用于拦截读取和设置操作。")])])]),e._v(" "),t("li",[t("p",[e._v("当读取属性时将副作用函数"),t("code",[e._v("effect")]),e._v("添加到桶里。")]),e._v(" "),t("ul",[t("li",[e._v("即"),t("code",[e._v("bucket.add(effect)")]),e._v(",然后返回属性值")])])]),e._v(" "),t("li",[t("p",[e._v("当设置属性值时先更新原始数据，再将副作用函数从桶里取出并重新执行。")])])]),e._v(" "),t("p",[e._v("通过以上步骤，我们就实现了响应式数据。可以用下面的代码来测试一下")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 副作用函数\nfunction effect(){\n  document.doby.innerText = obj.text\n}\n\n// 执行副作用函数，触发读取\neffect()\n\n//1秒后修改响应式数据\nsetTimeout(()=>{\n  obj.text = 'hello vue3'\n},1000)\n")])])]),t("p",[e._v("在浏览器中运行上面这段代码，会得到期望的结果。")]),e._v(" "),t("p",[e._v("但是目前的实现还存在很多缺陷，例如我们直接通过名字(effect)来获取副作用函数，这种硬编码的方式很不灵活。副作用函数的名字可以任意取，我们完全可以把副作用函数命名为"),t("code",[e._v("myEffect")]),e._v("，甚至是一个匿名函数，因此我们要想办法去掉这种硬编码的机制。")]),e._v(" "),t("p",[e._v("接下来会更详细介绍这一点，以上"),t("strong",[e._v("我们只需要理解响应式数据的基本实现和工作原理即可。")])]),e._v(" "),t("h2",{attrs:{id:"_2-3-设计一个完善的响应系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-设计一个完善的响应系统"}},[e._v("#")]),e._v(" 2.3 设计一个完善的响应系统")]),e._v(" "),t("p",[e._v("在上一节中，我们了解了如何实现响应式数据。但其实在这个过程中我们已经实现了一个微型响应系统，之所以说“微型”，是因为它还不完善，本节我们尝试构造一个更加完善的响应系统。")]),e._v(" "),t("p",[e._v("从上面的内容案例中不难看出，一个响应系统的工作流程如下：")]),e._v(" "),t("ul",[t("li",[e._v("当"),t("strong",[e._v("读取")]),e._v("操作发生时，将副作用函数收集到“桶”中；")]),e._v(" "),t("li",[e._v("当"),t("strong",[e._v("设置")]),e._v("操作发生时，从“桶”中取出副作用函数并执行。")])]),e._v(" "),t("p",[e._v("看上去很简单，但需要处理的细节还真不少。例如在上一节的实现中，我们硬编码了副作用函数的名字（effect），导致一旦副作用函数的名字不叫"),t("code",[e._v("effect")]),e._v("，那么这段代码就不能正确地工作了。")]),e._v(" "),t("p",[e._v("而我们希望的是，哪怕副作用函数是一个匿名会按书，也能够被正确地收集到“桶”中。为了实现这一点，我们需要提供一个用来注册副作用函数的机制，如下代码所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 用一个全局变量存储被注册的副作用函数\nlet activeEffect\n\n//effect函数用于注册副作用函数\nfunction effect(fn){\n  // 当调用effect注册副作用函数时，将副作用函数fn赋值给activeEffect\n  activeEffect = fn\n  // 执行副作用函数\n  fn()\n}\n")])])]),t("ul",[t("li",[e._v("首先，定义了一个全局变量"),t("code",[e._v("activeEffect")]),e._v(" ，初始值是"),t("code",[e._v("undefined")]),e._v("，它的作用是存储被注册的副作用函数。")]),e._v(" "),t("li",[e._v("接着重新定义了一个"),t("code",[e._v("effect")]),e._v("函数，它变成了一个用来注册副作用函数的函数，"),t("code",[e._v("effect")]),e._v("函数接收一个参数"),t("code",[e._v("fn")]),e._v("，即要注册的副作用函数。")])]),e._v(" "),t("p",[e._v("我们会如下所示使用"),t("code",[e._v("effect")]),e._v("函数")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("effect(\n  // 一个匿名的副作用函数\n  ()={\n    doucment.body.innerText = obj.text\n  }\n)\n")])])]),t("p",[e._v("可以看到，我们使用一个匿名函数的副作用函数作为"),t("code",[e._v("effect")]),e._v("函数的参数。当"),t("code",[e._v("effect")]),e._v("函数执行时，首先会把匿名的副作用函数"),t("code",[e._v("fn")]),e._v("赋值给全局变量"),t("code",[e._v("activeEffect")]),e._v("。 接着执行被注册的匿名副作用函数"),t("code",[e._v("fn")]),e._v("， 这将会触发响应式数据"),t("code",[e._v("obj.text")]),e._v("的读取操作，进而触发代理对象"),t("code",[e._v("Proxy")]),e._v("的"),t("code",[e._v("get")]),e._v("拦截函数：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const objt = new Proxy(data,{\n  get(target,key){\n    //将activeEffect中存储的副作用函数收集到“桶”中\n    if(activeEffect){ //新增\n      bucket.add(activeEffect)//新增\n    }\n    return target[key]\n  },\n  set(target,key,newVal){\n    target[key] = newVal\n    bucket.forEach(fn=>fn())\n    return true\n  }\n})\n")])])]),t("p",[e._v("如上面的代码所示，由于副作用函数已经存储到了"),t("code",[e._v("activeEffect")]),e._v("中，所以在"),t("code",[e._v("get")]),e._v("拦截函数内应该把"),t("code",[e._v("activeEffect")]),e._v("收集到“桶”中，这样响应系统就不依赖副作用函数的名字了。")]),e._v(" "),t("p",[e._v("但如果我们再对这个系统稍加测试，例如在响应式数据"),t("code",[e._v("obj")]),e._v("上设置一个不存在的属性时：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("effect(){\n  // 匿名副作用函数\n  ()=>{\n    console.log('effect run') // 会打印两次\n    document.body.innerText = obj.text\n  }\n}\n\nsetTimeout(()=>{\n  //副作用函数中并没用读取netExist属性的值\n  obj.notExist = 'hello vue3'\n},1000)\n")])])]),t("p",[e._v("可以看到，匿名副作用函数内部读取了一个字段"),t("code",[e._v("obj.text")]),e._v("的值，于是匿名副作用函数与字段"),t("code",[e._v("obj.text")]),e._v("之间会建立响应联系。")]),e._v(" "),t("p",[e._v("接着，我么开启了一个定时器，一秒钟后为对象"),t("code",[e._v("obj")]),e._v("添加新的"),t("code",[e._v("notExist")]),e._v("属性。我们知道，在匿名副作用函数内并没有读取"),t("code",[e._v("obj.notExist")]),e._v("属性的值，所以理论上， 字段"),t("code",[e._v("obj.notExist")]),e._v("并没有与副作用建立响应关系，因此，定时器内语句的执行不应该触发匿名副作用函数重新执行。")]),e._v(" "),t("p",[e._v("但如果我们执行上述这段代码就会发现，定时器到时后，匿名副作用函数却重新执行了，这是不正确的。为了解决这个问题，我们需要重新设计“桶”的数据结构。")]),e._v(" "),t("p",[e._v("在上节的例子中，我们使用了个"),t("code",[e._v("Set")]),e._v("数据结构作为存储副作用函数的“桶”。导致该问题的根本原因是，我们"),t("strong",[e._v("没有在副作用函数与被操作的目标字段之间建立明确的关系")]),e._v("。")]),e._v(" "),t("p",[e._v("例如当读取属性时，无论设置的是哪一个属性，也都会把“桶”里的副作用函数取出来并执行。副作用函数与被操作的字段之间没有明确的联系。")]),e._v(" "),t("p",[e._v("解决方法很简单，只需要在副作用函数与被操作的字段之间建立联系即可，这就需要我们重新设计“桶”的数据结构，而不能简单地使用"),t("code",[e._v("Set")]),e._v("类型地数据作“桶”了。")]),e._v(" "),t("p",[e._v("那应该设计怎么样的数据结构呢？ 在回答这个问题之前，我们需要先仔细观察下面的代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("effect(function effectFn(){\n  document.body.innerText = obj.text\n})\n")])])]),t("p",[e._v("在这段代码中存在三个角色：")]),e._v(" "),t("ul",[t("li",[e._v("被操作（读取）的代理对象"),t("code",[e._v("obj")]),e._v("；")]),e._v(" "),t("li",[e._v("被操作（读取）的字段名"),t("code",[e._v("text")]),e._v("；")]),e._v(" "),t("li",[e._v("使用"),t("code",[e._v("effect")]),e._v("函数注册的副作用函数"),t("code",[e._v("effectFn")])])]),e._v(" "),t("p",[e._v("如果"),t("code",[e._v("target")]),e._v("来表示一个代理对象所代理的原始对象，用"),t("code",[e._v("key")]),e._v("来表示被操作的字段名，用"),t("code",[e._v("effectFn")]),e._v("来表示被注册的副作用函数，那么可以为这三个角色建立如下关系：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("target\n   L__ key\n        L___ effectFn\n    \n")])])]),t("p",[e._v("这种树形结构，下面举几个例子来对其进行补充说明。")]),e._v(" "),t("p",[e._v("如果有两个副作用函数同时读取同一个对象的属性值：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("effect(function effectFn1(){\n  obj.text \n})\n\neffect(function effectFn2(){\n  obj.text \n})\n")])])]),t("p",[e._v("那么关系如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("target\n   L__ text\n        L___ effectFn \n        L___ effectFn\n")])])]),t("p",[e._v("如果一个副作用函数中读取了同一个对象的两个不同属性：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("effect(function effectFn(){\n  obj.text1\n  obj.text2\n})\n")])])]),t("p",[e._v("那么关系如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("target\n   L__ text1\n        L___ effectFn \n        \n   L__ text2\n        L___ effectFn\n")])])]),t("p",[e._v("如果在不同的副作用函数中读取了两个不同对象的不同属性：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("effect(function effectFn1(){\n  obj1.text1\n})\neffect(function effectFn2(){\n  obj2.text2\n})\n")])])]),t("p",[e._v("那么关系如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("target1\n   L__ text1\n        L___ effectFn1\ntarget2        \n   L__ text2\n        L___ effectFn2\n")])])]),t("p",[e._v("总之，这其实就是一个树型数据结构。这个联系建立起来之后，就可以解决前文提到的问题了。 拿上面的例子来说， 如果我们设置了"),t("code",[e._v("obj2.text2")]),e._v("的值，就只会导致"),t("code",[e._v("effectFn2")]),e._v("函数重新执行，并不会导致"),t("code",[e._v("effectFn1")]),e._v("函数重新执行。")]),e._v(" "),t("p",[e._v("接下来我们尝试用代码来实现这个新的“桶”。 首先，需要使用"),t("code",[e._v("WeakMap")]),e._v("替代"),t("code",[e._v("Set")]),e._v("作为桶的数据结构：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 存储到副作用函数的桶\nconst bucket = new WeakMap()\n")])])]),t("p",[e._v("然后修改"),t("code",[e._v("get/set")]),e._v("拦截器代码:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const obj = new Proxy(data,{\n  //拦截器读取操作\n  get(target,key){\n    //没有 activeEffect,直接return \n    if(!activeEffect) return\n    // 根据target从“桶”中取得depsMap，它也是一个Map类型，key--〉effects\n    let depsMap = bucket.get(target)\n    // 如果不存在depsMap，那么新建一个Map并与target关联\n    if(!depsMap){\n      bucket.set(target,(depsMap = new Map())\n    }\n    // 再根据key从depsMap中取得deps，它是一个Set类型\n    //里面存储着所有与当前key相关联的副作用函数：effects\n    let deps = depsMap.get(key)\n    // 如果deps不存在，同样在新建一个Set并与key关联\n    if(!deps){\n      depsMap.set(key,(deps = new Set()))\n    }\n      \n    // 最后将当前激活的副作用函数添加到“桶”里\n    deps.add(activeEffect)\n    \n    //返回属性值\n    return target[key]\n  },\n    \n  //拦截设置操作\n  set(target,key,newVal){\n    //设置属性值\n    target[key] = newVal\n    // 根据target 从桶中取得depsMap，它是key--\x3e effects\n    const depsMap = bucket.get(target)\n    if(!depsMap) return \n    //根据key取得所副作用函数effects\n    const effects = depsMap.get(key)\n    //执行副作用函数\n    effects && effects.forEach(fn=>fn())\n  }\n})\n")])])]),t("p",[e._v("从这段代码可以看出构建数据结构的方式，我们分别使用了"),t("code",[e._v("WeakMap")]),e._v("、"),t("code",[e._v("Map")]),e._v("和"),t("code",[e._v("Set")]),e._v("：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("WeakMap")]),e._v("由"),t("code",[e._v("target --\x3e Map")]),e._v(" 构成")]),e._v(" "),t("li",[t("code",[e._v("Map")]),e._v("由"),t("code",[e._v("key--\x3eSet")]),e._v("构成")])]),e._v(" "),t("p",[e._v("其中"),t("code",[e._v("WeakMap")]),e._v("的键是原始对象"),t("code",[e._v("target")]),e._v("，"),t("code",[e._v("WeakMap")]),e._v("的值是一个"),t("code",[e._v("Map")]),e._v("实例，而"),t("code",[e._v("Map")]),e._v("的键是原始对象"),t("code",[e._v("target")]),e._v("的"),t("code",[e._v("key")]),e._v("，"),t("code",[e._v("Map")]),e._v("的值是一个由副作用函数组成的"),t("code",[e._v("Set")]),e._v("。它们的关系如图3所示：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7bfffce694de4fafae14e6e99c030e17~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),t("p",[e._v("为了方便描述，我们把关系图3中的"),t("code",[e._v("Set")]),e._v("数据结构所存储的副作用函数集合称为"),t("code",[e._v("key")]),e._v("的"),t("strong",[e._v("依赖集合")]),e._v("。")]),e._v(" "),t("p",[e._v("搞清了它们之间的关系，我们有必要解释一下这里为什么要使用"),t("code",[e._v("WeakMap")]),e._v("，这其实涉及了"),t("code",[e._v("WeakMap")]),e._v("和"),t("code",[e._v("Map")]),e._v("的区别，我们用一段代码解释：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const map = new Map()\nconst weakmap = new WeakMap()\n\n(function(){\n  const foo = {foo:1};\n  const bar = {bar:2};\n  \n  map.set(foo,1);\n  weakmap.set(bar,2);\n})\n")])])]),t("p",[e._v("首先，我们定义了"),t("code",[e._v("map")]),e._v("和"),t("code",[e._v("weakmap")]),e._v("常量，分别对应"),t("code",[e._v("Map")]),e._v(" 和"),t("code",[e._v("WeakMap")]),e._v("的实例。")]),e._v(" "),t("p",[e._v("接着定义了一个立即执行的函数表达式（IIFE），在函数表达式内部定义了两个对象："),t("code",[e._v("foo")]),e._v("和"),t("code",[e._v("bar")]),e._v("，这两个对象分别作为"),t("code",[e._v("map")]),e._v("和"),t("code",[e._v("weakmap")]),e._v("的"),t("code",[e._v("key")]),e._v("。当该函数表达式执行完毕后，对于对象"),t("code",[e._v("foo")]),e._v("来说，它仍然作为"),t("code",[e._v("map")]),e._v("的"),t("code",[e._v("key")]),e._v("被引用着，因此"),t("strong",[e._v("垃圾回收器")]),e._v("（grabage collector）不会把它从内存中移除，我们仍然可以通过"),t("code",[e._v("map.keys")]),e._v("打印出对象"),t("code",[e._v("foo")]),e._v(" "),t("strong",[e._v("。")])]),e._v(" "),t("p",[e._v("然而这对于对象"),t("code",[e._v("bar")]),e._v("来说，由于"),t("code",[e._v("WeakMap")]),e._v("的"),t("code",[e._v("key")]),e._v("是弱引用，它不影响垃圾回收器的工作，所以一旦表达式执行完毕，垃圾回收器就会把对象"),t("code",[e._v("bar")]),e._v("从内存中移除，并且我们无法获取"),t("code",[e._v("weakmap")]),e._v("的"),t("code",[e._v("key")]),e._v("值，也就无法通过"),t("code",[e._v("weakmap")]),e._v("取得对象"),t("code",[e._v("bar")]),e._v("。")]),e._v(" "),t("p",[e._v("简单地说，"),t("code",[e._v("WeakMap")]),e._v("对"),t("code",[e._v("key")]),e._v("是弱引用，不影响垃圾回收器的工作。 据这个特性可知，一旦"),t("code",[e._v("key")]),e._v("被垃圾回收器回收，那么对应的键和值就访问不到了。")]),e._v(" "),t("p",[e._v("所以"),t("code",[e._v("WeakMap")]),e._v("经常用于存储那些只有当"),t("code",[e._v("key")]),e._v("所引用的对象存在时（没有被回收）才有价值的信息，例如上面的场景中，如果"),t("code",[e._v("target")]),e._v("对象没有任何引用了，说明用户侧不再需要它了，这时垃圾回收器会完成回收任务。")]),e._v(" "),t("p",[e._v("但如果使用"),t("code",[e._v("Map")]),e._v("来代替"),t("code",[e._v("WeakMap")]),e._v("，那么即使用户侧的代码对"),t("code",[e._v("target")]),e._v("没有任何引用，这个"),t("code",[e._v("target")]),e._v("也不会被回收，最有可能导致内存溢出。")]),e._v(" "),t("p",[e._v("最后，我们对上文的代码再做一些封装处理。")]),e._v(" "),t("p",[e._v("在目前的实现中，当读取属性值时，我们直接在"),t("code",[e._v("get")]),e._v("拦截函数里编写把副作用函数收集到“桶”里的这部分逻辑，但更好的做法是将这部分逻辑单独封装到一个"),t("code",[e._v("track")]),e._v("函数中，函数的名字叫做"),t("code",[e._v("track")]),e._v("是为了表达"),t("strong",[e._v("追踪")]),e._v("的含义。 同样，我们也可以把"),t("strong",[e._v("触发")]),e._v("副作用函数重新执行的逻辑封装到"),t("code",[e._v("trigger")]),e._v("函数中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const obj = new Proxy(data,{\n  //拦截读取操作\n  get(target,key){\n    //将副作用函数activeEffect添加到存储副作用函数的桶中\n    tract(target,key)\n    return target[key]\n  },\n  //拦截设置操作\n  set(target,key,newVal){\n    //设置属性值\n    target[key] = newVal\n    //把副作用函数从桶里取出并执行\n    trigger(target,key)\n  }\n})\n\n//在get拦截函数内调用track函数追踪变化\nfunction track(target,key){\n  //没有activeEffect，直接return\n  if(!activeEffect) return\n  let depsMap = bucket.get(target)\n  if(!depsMap){\n    bucket.set(target,(depsMap = new Map()))\n  }\n  let deps = depsMap.get(key)\n  if(!deps){\n    depsMap.set(key,(deps = new Set()))\n  }\n  deps.add(activeEffect)\n}\n\n//在set拦截函数内调用tirgger函数触发变化\nfunction trigger(target,key){\n  const depsMap = bucket.get(target)\n  if(!depsMap) return\n  const effects = depsMap.get(key)\n  effects && effects.forEach(fn => fn())\n}\n")])])]),t("p",[e._v("如以上代码所示，分别把逻辑封装到"),t("code",[e._v("track")]),e._v("和"),t("code",[e._v("trigger")]),e._v("函数内，这能为我们带来极大的灵活性。")]),e._v(" "),t("h2",{attrs:{id:"_2-4-分支切换与cleanup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-分支切换与cleanup"}},[e._v("#")]),e._v(" 2.4 分支切换与"),t("code",[e._v("cleanup")])]),e._v(" "),t("p",[e._v("首先，我们需要明确分支切换的定义，如下面代码所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const data = {ok:true,text:'hello world'}\nconst obj = new Proxy(data,{/*....*/})\n\neffect(function effectFn(){\n  document.body.innerText = obj.ok ? obj.text : 'not'\n})\n")])])]),t("p",[e._v("当"),t("code",[e._v("effectFn")]),e._v("函数内部存在一个三元表达式，根据字段"),t("code",[e._v("obj.ok")]),e._v("值当不同会执行不同的代码分支。当字段"),t("code",[e._v("obj.ok")]),e._v("的值发生变化时，代码执行的分支会跟着变化，这就是所谓的"),t("strong",[e._v("分支切换")]),e._v("。")]),e._v(" "),t("p",[e._v("分支切换可能会产生遗留的副作用函数。拿上面这段代码来说：")]),e._v(" "),t("ul",[t("li",[e._v("字段"),t("code",[e._v("obj.ok")]),e._v("的初始值为"),t("code",[e._v("true")]),e._v("，这是会读取字段"),t("code",[e._v("obj.text")]),e._v("的值")]),e._v(" "),t("li",[e._v("所以当"),t("code",[e._v("effectFn")]),e._v("函数执行时会触发字段"),t("code",[e._v("obj.ok")]),e._v("和字段"),t("code",[e._v("obj.text")]),e._v("这两个属性的读取操作")])]),e._v(" "),t("p",[e._v("此时副作用函数"),t("code",[e._v("effectFn")]),e._v("与响应式数据之间建立的联系如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("data\n   L___ ok\n         L___effectFn\n   L___ text\n         L___effectFn\n")])])]),t("p",[e._v("图4，给出了更详细的描述")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3eee484bb17453a944408be43a2ff06~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),t("p",[e._v("可以看到，副作用函数"),t("code",[e._v("effectFn")]),e._v("分别被字段"),t("code",[e._v("data.ok")]),e._v("和字段"),t("code",[e._v("data.text")]),e._v("所对应的依赖集合收集。当字段"),t("code",[e._v("obj.ok")]),e._v("的值修改为"),t("code",[e._v("false")]),e._v("，并触发副作用函数重新执行后，由于此时字段"),t("code",[e._v("obj.text")]),e._v("不会读取，只会触发字段"),t("code",[e._v("obj.ok")]),e._v("的读取操作，所以理想情况下副作用函数"),t("code",[e._v("effectFn")]),e._v("不应该被字段"),t("code",[e._v("obj.text")]),e._v("所对应的依赖集合收集，如图5所示：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a14f8b17beb14435a5d7c10519b55176~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),t("p",[e._v("但按照前文的实现，我们还做不到这一点。也就是说，当我们把字段"),t("code",[e._v("obj.ok")]),e._v("的值修改为"),t("code",[e._v("false")]),e._v("，并触发副作用函数重新执行后，整个依赖关系仍然保持图4所描述的那样，这是久产生了遗留的副作用函数。")]),e._v(" "),t("p",[e._v("遗留的副作用函数会导致不必要的更新，拿下面这段代码来说：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const data = {ok:true,text:'hello world'}\ncosnt obj = new Proxy(data,{/*...*/})\n\neffect(function effectFn(){\n  document.body.innerText = obj.ok ? obj.text : 'not'\n})\n")])])]),t("p",[t("code",[e._v("obj.ok")]),e._v("的初始值为"),t("code",[e._v("true")]),e._v("，当我们将其修改为"),t("code",[e._v("false")]),e._v("后：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("obj.ok = false\n")])])]),t("p",[e._v("这会触发更新，即副作用函数会重新执行。但由于此时"),t("code",[e._v("obj.ok")]),e._v("的值为"),t("code",[e._v("false")]),e._v("，所以不再会读取字段"),t("code",[e._v("obj.text")]),e._v("的值。 换句话说，无论字段"),t("code",[e._v("obj.text")]),e._v("的值如何改变，"),t("code",[e._v("document.body.innerText")]),e._v("的值始终都是字符串'not'。")]),e._v(" "),t("p",[e._v("所以最好的结果是：无论"),t("code",[e._v("obj.text")]),e._v("的值怎么变，都不需要重新执行副作用函数。但事实并非如此，如果我们尝试修改"),t("code",[e._v("obj.text")]),e._v("的值：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("obj.text = 'hello vue3'\n")])])]),t("p",[e._v("这仍然会导致副作用函数重新执行，即使"),t("code",[e._v("document.body.innerText")]),e._v("的值不需要变化。")]),e._v(" "),t("p",[e._v("解决这个问题的思路很简单：每次副作用函数执行时，我们可以先把它从所有与之关联的依赖集合中删除，如图6所示：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c43bbd5a68b040ae863c0065499397dc~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),t("p",[e._v("当副作用函数执行完毕后， 会重新建立联系，但在新的联系中不会包含遗留的副作用函数，即图5所描述的那样。所以，如果我们能做到每次副作用函数执行前，将其从相关联的依赖集合中移除，那么问题就迎刃而解了。")]),e._v(" "),t("p",[e._v("要将一个副作用函数从所有与之关联的依赖集合中移除，就需要明确知道哪些依赖集合中包含它，因此我们需要重新设计副作用函数，如下面的代码所示。")]),e._v(" "),t("p",[e._v("在"),t("code",[e._v("effect")]),e._v("内部我们定义了新的"),t("code",[e._v("effectFn")]),e._v("函数，并为其添加了"),t("code",[e._v("effectFn.deps")]),e._v("属性，该属性是一个数组，用来存储包含当前副作用函数的依赖集合：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//用一个全局变量存储被注册的副作用函数\nlet activeEffect\nfunction effect(fn){\n  const effectFn=()=>{\n    //当effectFn执行时，将其设置为当前激活的副作用函数\n    activeEffect = effectFn\n    fn()\n  }\n  //activeEffect.deps用来存储所有与该副作用函数相关联的依赖集合\n  effectFn.deps = []\n  //执行副作用函数\n  effectFn()  \n}\n")])])]),t("p",[e._v("那么"),t("code",[e._v("effectFn.deps")]),e._v("数组中的依赖集合是如何收集的呢？其实是在"),t("code",[e._v("track")]),e._v("函数中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function track(target,key){\n  //没有activeEffect，直接return\n  if(!activeEffect) return\n  let depsMap = bucket.get(target)\n  if(!depsMap){\n    bucket.set(target,(depsMap = new Map()))\n  }\n  let deps = depsMap.get(key)\n  if(!deps){\n    depsMap.set(key,(deps = new Set()))\n  }\n  \n  //把当前激活的副作用函数添加到依赖集合deps中\n  deps.add(activeEffect)\n  \n  //deps就是一个当前副作用函数存在联系的依赖集合\n  //将其添加到activeEffect.deps数组中\n  activeEffect.deps.push(deps) //新增\n}\n")])])]),t("p",[e._v("如以上代码所示，在"),t("code",[e._v("track")]),e._v("函数中我们将执行的副作用函数"),t("code",[e._v("activeEffect")]),e._v("添加到依赖集合"),t("code",[e._v("deps")]),e._v("中，这说明"),t("code",[e._v("deps")]),e._v("就是一个与当前副作用函数存在联系的依赖集合，于是我们也把它添加到"),t("code",[e._v("activeEffect.deps")]),e._v("数组中，这样就完成了对依赖集合的收集。如图7描述了这一步所建立的关系。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b515d18eebfb4e38a0f1b60c94986118~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),t("p",[e._v("有了这个联系后，我们就可以在每次副作用函数执行时，根据"),t("code",[e._v("effectFn.deps")]),e._v("获取所有相关联的依赖集合，进而将副作用函数从依赖集合中移除：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//用一个全局变量存储被注册的副作用函数\nlet activeEffect\nfunction effect(fn){\n  const effectFn = ()=>{\n    //调用cleanup函数完成清除工作\n    cleanup(effectFn)\n    activeEffect = effectFn\n    fn()\n  }\n  effectFn.deps = []\n  effectFn()\n}\n")])])]),t("p",[e._v("下面是"),t("code",[e._v("cleanup")]),e._v("函数的实现：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function cleanup(effectFn){\n  // 遍历effectFn.deps数组\n  for(let i=0; i< effectFn.deps.length; i++){\n    //deps是依赖集合\n    const deps =effectFn.deps[i]\n    //将effectFn从依赖集合中移除\n    deps.delete(effectFn)\n  }\n  //最后需要重置effectFn.deps数组\n  effectFn.deps.length=0\n}\n")])])]),t("p",[t("code",[e._v("cleanup")]),e._v("函数接收副作用函数作为参数，遍历副作用函数的"),t("code",[e._v("effectFn.deps")]),e._v("数组，该数组的每一项都是一个依赖集合，然后将该副作用函数从依赖集合中移除，最后重置"),t("code",[e._v("effectFn.deps")]),e._v("数组。")]),e._v(" "),t("p",[e._v("至此，我们的响应式系统已经可以避免副作用函数产生遗留了。但如果你尝试运行代码，会发现目前的实现会导致无限循环执行，问题出现在"),t("code",[e._v("trigger")]),e._v("函数中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function trigger(target,key){\n  const depsMap = bucket.get(target)\n  if(!depsMap) return\n  const effects = depsMap.get(key)\n  effects && effects.forEach(fn => fn()) //问题出在这句代码\n}\n")])])]),t("p",[e._v("在"),t("code",[e._v("trigger")]),e._v("函数内部，我们遍历"),t("code",[e._v("effects")]),e._v("集合，它是一个"),t("code",[e._v("Set")]),e._v("集合，里面存储着副作用函数。")]),e._v(" "),t("p",[e._v("当副作用函数执行时，会调用"),t("code",[e._v("cleanup")]),e._v("进行清除，实际上就是从"),t("code",[e._v("effects")]),e._v("集合中将当前执行的副作用函数剔除，但是副作用函数的执行会导致其重新被收集到集合中，而此时对于"),t("code",[e._v("effects")]),e._v("集合的便利仍在进行。这个行为可以用如下简短代码来表达：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const set = new Set([1])\n\nset.forEach(item=>{\n  set.delete(1)\n  set.add(1)\n  console.log('遍历中')\n})\n")])])]),t("p",[e._v("在上面这段代码中，我们创建了一个集合"),t("code",[e._v("set")]),e._v("，它里面有一个元素数字1，接着我们调用"),t("code",[e._v("forEach")]),e._v("遍历了该集合。在遍历过程中，首先调用"),t("code",[e._v("delete(1)")]),e._v("删除数字1，紧接着调用"),t("code",[e._v("add(1)")]),e._v("将数字1加回，最后打印‘遍历中’。如果我们在浏览器中执行这段代码，就会发现它会在这无限执行下去。")]),e._v(" "),t("p",[e._v("语言规范中对此有明确的说明："),t("strong",[e._v("在调用")]),t("code",[e._v("forEach")]),t("strong",[e._v("遍历")]),t("code",[e._v("Set")]),t("strong",[e._v("集合时候，如果一个值已经被访问过了，但该值被删除并重新添加到集合，如果此时")]),t("code",[e._v("forEach")]),t("strong",[e._v("遍历没有结束，那么该值就会重新被访问。")])]),e._v(" "),t("p",[e._v("因此，上面的代码会无限执行。解决办法很简单，我们可以构造另一个"),t("code",[e._v("Set")]),e._v("集合并遍历它：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const set = new Set([1])\n\nconst newSet = new Set(set)\nnewSet.forEach(item=>{\n  set.delete(1)\n  set.add(1)\n  console.log('遍历中')\n})\n")])])]),t("p",[e._v("这样就不会无限执行了。回到"),t("code",[e._v("trigger")]),e._v("函数，我们需要同样的手段来避免无限执行：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function trigger(target,key){\n  const depsMap = bucket.get(target)\n  if(!depsMap) return\n  const effects = bucket.get(key)\n  \n  const effectsToRun = new Set(effects) //新增\n  effectToRun && effectToRun.forEach(effectFn => effectFn()) //新增\n  // effects && effects.forEach(effectFn => effectFn()) //删除\n}\n")])])]),t("p",[e._v("如上代码所示，我们新构造了"),t("code",[e._v("effectToRun")]),e._v("集合并遍历它，代替直接遍历"),t("code",[e._v("effects")]),e._v("集合，从而避免了无限执行。")]),e._v(" "),t("p",[e._v("\\")]),e._v(" "),t("p",[e._v("提示： ECMA关于"),t("code",[e._v("Set.prototype.forEach")]),e._v("的规范，可参见"),t("code",[e._v("ECMAScript 2020 Language Specification")]),e._v("。")]),e._v(" "),t("h2",{attrs:{id:"_2-5-嵌套与effect与effect栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-嵌套与effect与effect栈"}},[e._v("#")]),e._v(" 2.5 嵌套与"),t("code",[e._v("effect")]),e._v("与"),t("code",[e._v("effect")]),e._v("栈")]),e._v(" "),t("p",[t("code",[e._v("effect")]),e._v("是可以发生嵌套的，例如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("effect(function effectFn1(){\n  effect(function effectFn2(){\n    /*...*/\n  })\n  /*...*/\n})\n")])])]),t("p",[e._v("在上面这段代码中，"),t("code",[e._v("effectFn1")]),e._v("内部嵌套了"),t("code",[e._v("effectF2")]),e._v(","),t("code",[e._v("effectF1")]),e._v("的执行会导致"),t("code",[e._v("effectF2")]),e._v(" 的执行。")]),e._v(" "),t("p",[e._v("那么什么场景下会出现嵌套的"),t("code",[e._v("effect")]),e._v("呢？拿"),t("code",[e._v("Vue.js")]),e._v("来说，实际上"),t("code",[e._v("Vue.js")]),e._v("的渲染函数就是在一个"),t("code",[e._v("effect")]),e._v("中执行的：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//Foo组件\nconst Foo = {\n  render(){\n    return /*...*/\n  }\n}\n")])])]),t("p",[e._v("在一个"),t("code",[e._v("effect")]),e._v("中执行"),t("code",[e._v("Foo")]),e._v("组件的渲染函数：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("effect(()=>{\n   Foo.render() \n})\n")])])]),t("p",[e._v("当组建发生嵌套时，例如"),t("code",[e._v("Foo")]),e._v("组件渲染了"),t("code",[e._v("Bar")]),e._v("组件：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//Bar组件\nconst Bar = {\n  render(){/*...*/}\n}\n\n//Foo组件渲染了Bar组件\nconst Foo = {\n  render(){\n    return <Bar /> //jsx语法\n  }\n}\n")])])]),t("p",[e._v("此时就发生了"),t("code",[e._v("effect")]),e._v("嵌套，它相当于：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("effect(()=>{\n  Foo.render()\n  //嵌套\n  effect(()=>{\n    Bar.render()\n  })\n})\n")])])]),t("p",[e._v("这个例子说明了为什么"),t("code",[e._v("effect")]),e._v("要设计成可嵌套的。")]),e._v(" "),t("p",[e._v("接下来，我们需要搞清楚，如果"),t("code",[e._v("effect")]),e._v("不支持嵌套会发生什么？ 实际上，按照前文的介绍与实现来看，我们所实现的响应系统并不支持"),t("code",[e._v("effect")]),e._v("嵌套，可以用下面的代码来测试：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//原始数据\nconst data = {foo:true,bar:true}\n//代理对象\nconst obj = new Proxy(data,{/*...*/})\n\n//全局变量\nlet temp1，temp2\n\n// effectFn1嵌套了effectFn2\neffect(function effectFn1(){\n  console.log('effectFn1 执行')\n  \n  effect(function effectFn2(){\n    console.log('effectFn2 执行')\n    //在effectFn2中读取obj.bar属性\n    temp2=obj.bar\n  })\n  //在effectFn1 中读取obj.foo属性\n  temp1 = obj.foo\n})\n")])])]),t("p",[e._v("在上面这段代码中， "),t("code",[e._v("effectFn1")]),e._v("内部嵌套了"),t("code",[e._v("effectFn2")]),e._v("，很明显，"),t("code",[e._v("effectFn1")]),e._v("的执行会导致"),t("code",[e._v("effectFn2")]),e._v("的执行。")]),e._v(" "),t("p",[e._v("需要注意的是，我们在 "),t("code",[e._v("effectFn2")]),e._v("中读取了字段"),t("code",[e._v("obj.bar")]),e._v("，在"),t("code",[e._v("effectFn1")]),e._v("中读取了字段"),t("code",[e._v("obj.foo")]),e._v("，并且"),t("code",[e._v("effectFn2")]),e._v("的执行先对于字段"),t("code",[e._v("obj.foo")]),e._v("的读取操作。")]),e._v(" "),t("p",[e._v("在理想情况下，我们希望副作用函数与对象属性之间的联系如下：\\")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("data\n  L___foo\n     L___effectFn1\n  L___bar\n     L___effectFn2\n")])])]),t("p",[e._v("在这种情况下，我们希望当修改"),t("code",[e._v("data.foo")]),e._v("时会触发"),t("code",[e._v("effectFn1")]),e._v("执行。由于"),t("code",[e._v("effectFn2")]),e._v("嵌套在"),t("code",[e._v("effectFn1")]),e._v("里，所以会间接触发"),t("code",[e._v("effectFn2")]),e._v("执行，而当修改"),t("code",[e._v("obj.bar")]),e._v("时，只会触发 "),t("code",[e._v("effectFn2")]),e._v("执行。但结果不是这样的，我们尝试修改"),t("code",[e._v("obj.foo")]),e._v("的值，会发现输出为：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'effectFn1 执行'\n'effectFn2 执行'\n'effectFn2 执行'\n")])])]),t("p",[e._v("一共打印三次， 前两次分别是副作用函数"),t("code",[e._v("effectFn1")]),e._v("与"),t("code",[e._v("effectFn2")]),e._v("初始执行的打印结果， 到这一步是正常的，问题出在第三行打印。我们修改了字段"),t("code",[e._v("obj.foo")]),e._v("的 值，发现"),t("code",[e._v("effectFn1")]),e._v("并没有重新执行，反而使得"),t("code",[e._v("effectFn2")]),e._v("重新执行了，这显然不符合预期。")]),e._v(" "),t("p",[e._v("问题出现在哪里呢？其实就出在我们实现的"),t("code",[e._v("effect")]),e._v("函数与"),t("code",[e._v("activeEffect")]),e._v("上。观察下面这段代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//用一个全局变量存储当前激活的effect函数\nlet activeEffect\nfunction effect(fn){\n  const effectFn = () =>{\n    cleanup(effectFn)\n    //当调用effect注册副作用函数时，将副作用函数复制给activeEffect\n    activeEffect = effectFn\n    fn()\n    // activeEffect.deps 用来存储所有与该副作用函数相关的依赖合集\n    effectFn.deps = []\n    //执行副作用函数\n    effectFn()\n  }\n}\n")])])]),t("p",[e._v("我们用全局变量 "),t("code",[e._v("activeEffect")]),e._v("来存储通过"),t("code",[e._v("effect")]),e._v("函数注册的副作用函数，这意味着同一时刻"),t("code",[e._v("activeEffect")]),e._v("所存储的副作用函数只能有一个。当副作用函数发生嵌套时，内层副作用函数的执行会覆盖"),t("code",[e._v("activeEffect")]),e._v("的值，并且永远不会恢复到原来的值。这时如果再有响应式数据进入依赖收集，即使这个响应式数据是在外层副作用函数中读取的，它们收集到的副作用函数也都会是内层副作用函数，这就是问题所在。\\")]),e._v(" "),t("p",[e._v("为了解决这个问题，我们需要一个副作用函数栈"),t("code",[e._v("effectStack")]),e._v("，在副作用函数执行时，将当前副作用函数压入栈中，待副作用函数执行完毕后将其从栈中弹出，并始终让"),t("code",[e._v("activeEffect")]),e._v("指向栈顶的副作用函数。这样就能做到一个响应式数据只会收集直接读取其值的副作用函数，而不会出现互相影响的情况，如下代码所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//用一个全局变量存储当前激活的effect函数\nlet activeEffect\n//effect栈\nconst effectStack = [] //新增\n\nfunction effect(fn){\n  const effectFn = () => {\n    cleanup(effectFn)\n    //当调用effect注册副作用函数时，将副作用函数复制给activeEffect\n    activeEffect = effectFn\n    //在调用副作用函数之前将当前副作用函数压入栈中\n    effectStack.push(effectFn) //新增\n    fn()\n    \n    //在当前副作用函数执行完毕后，将当前副作用函数弹出栈，并把activeEffect还原为之前的值\n    effectStack.pop() //新增\n    activeEffect = effectStack[effectStack.length-1]//新增\n  }\n  // activeEffect.deps 用来存储所有与该副作用函数相关的依赖集合\n  effectFn.deps = []\n  //执行副作用函数\n  effectFn()\n}\n")])])]),t("p",[e._v("我们定义了"),t("code",[e._v("effectStack")]),e._v("数组，用它来模拟栈，"),t("code",[e._v("activeEffect")]),e._v("没有变化， 它仍然指向当前正在执行的副作用函数。不同的是，当前执行的副作用函数会被压入栈顶，这样当副作用函数发生嵌套时，栈底存储的就是外层副作用函数，而栈顶存储的则是内层副作用函数。如果8所示。")]),e._v(" "),t("p",[e._v("当内层副作用函数"),t("code",[e._v("effectFn2")]),e._v("执行完毕后， 它会被弹出栈，并将副作用函数"),t("code",[e._v("effectFn1")]),e._v("设置为"),t("code",[e._v("activeEffect")]),e._v(",如图9所示。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c187271f386a44409a035c73c3a51d83~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),t("p",[e._v("如此依赖，响应式数据就只会手机直接读取其值的副作用函数作为依赖，从而避免发生错乱。")]),e._v(" "),t("h2",{attrs:{id:"_2-6-避免无限递归循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-避免无限递归循环"}},[e._v("#")]),e._v(" 2.6 避免无限递归循环")]),e._v(" "),t("p",[e._v("如前文所说，实现一个完善的响应系统要考虑诸多细节。而本节要介绍的无限递归循环就是其中之一，还是举个例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const data = {foo:1}\nconst obj = new Proxy(data,{/*...*/})\n\neffect(()=>obj.foo++)\n")])])]),t("p",[e._v("可以看到， 在effect注册的副作用函数内有一个自增操作"),t("code",[e._v("obj.foo++")]),e._v("，该操作会引起栈溢出：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Uncaught RangeError：Maxinum call stack size exceeded\n")])])]),t("p",[e._v("为什么会这样呢？接下来我们就尝试搞清楚这个问题，并提供解决方案。")]),e._v(" "),t("p",[e._v("实际上，我们可以把"),t("code",[e._v("obj.foo++")]),e._v(" 这个自增操作分开来看，它相当于：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("effect(()=>{\n  //语句\n  obj.foo = obj.foo+1\n})\n")])])]),t("p",[e._v("在这个语句中， 既会读取"),t("code",[e._v("obj.foo")]),e._v("的值，又会设置"),t("code",[e._v("obj.foo")]),e._v("的值，而这就是导致问题的根本原因。")]),e._v(" "),t("p",[e._v("我们可以尝试推理下代码的执行流程：")]),e._v(" "),t("ul",[t("li",[e._v("首先读取"),t("code",[e._v("obj.foo")]),e._v("的值，这就会触发"),t("code",[e._v("track")]),e._v("操作，将当前副作用函数收集到“桶”中")]),e._v(" "),t("li",[e._v("接着将其加1后再赋值给"),t("code",[e._v("obj.foo")]),e._v("，此时会触发"),t("code",[e._v("trigger")]),e._v("操作，即把“桶”中的副作用函数取出并执行。")])]),e._v(" "),t("p",[e._v("但问题是该副作用函数正在执行中， 还没有执行完毕，就要开始下一次的执行。这样会导致无限递归地调用自己，于是就产生了栈溢出。")]),e._v(" "),t("p",[e._v("解决办法并不难。通过分析这个问题我们能够发现，读取和设置操作是在同一个副作用函数内进行的。 此时无论是"),t("code",[e._v("track")]),e._v("时收集的副作用函数，还是"),t("code",[e._v("trigger")]),e._v("时要触发执行的副作用函数都是"),t("code",[e._v("activeEffect")]),e._v("。")]),e._v(" "),t("p",[e._v("基于此，我们可以在"),t("code",[e._v("trigger")]),e._v("动作发生时增加守卫条件："),t("strong",[e._v("如果")]),t("code",[e._v("trigger")]),t("strong",[e._v("触发执行的副作用函数与当前正在执行的副作用函数相同，则不触发执行。")]),e._v(" 如下代码所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function trigger(target,key){\n  const depsMap = bucket.get(target)\n  if(!depsMap) return \n  const effects = depsMap.get(key)\n  \n  const effectsToRun = new Set()\n  \n  effects && effects.forEach(effectFn =>{\n    //如果trigger触发执行的副作用函数与当前正在执行的副作用函数相同，则不触发执行\n    if(effectFn !== activeEffect){ //新增\n      effectsToRun.add(effectFn)\n    }\n  })\n  \n  effectsToRun.forEach(effectFn => effectFn())\n  // effects && effects.forEach(effectFn => effectFn())\n}\n")])])]),t("p",[e._v("这样我们就能够避免无限递归调用， 从而避免栈溢出。")]),e._v(" "),t("h2",{attrs:{id:"_2-7-调度执行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-调度执行"}},[e._v("#")]),e._v(" 2.7 调度执行")]),e._v(" "),t("p",[e._v("可调度性是响应系统非常重要的特性。首先我们需要明确说明是可调度性。")]),e._v(" "),t("p",[e._v("所谓可调度，指的是当"),t("code",[e._v("trigger")]),e._v("动作触发副作用函数重新执行时，有能力决定副作用函数执行的时机、次数以及方式。")]),e._v(" "),t("p",[e._v("首先来看一下，如何决定副作用函数的执行方式，以下面的代码为例：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const data = {foo:1}\nconst obj = new Proxy(data,{/*...*/})\n\neffect(()=>{\n  console.log(obj.foo)\n})\n\nobj.foo++\n\nconsole.log('结束了')\n")])])]),t("p",[e._v("在副作用函数中，我们首先使用"),t("code",[e._v("console.log")]),e._v("语句打印"),t("code",[e._v("obj.foo")]),e._v("的值，接着对"),t("code",[e._v("obj.foo")]),e._v("执行自增操作，最后使用"),t("code",[e._v("console.log")]),e._v("语句打印‘结束了’。 这段代码的输出结果如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("1\n2\n'结束了'\n")])])]),t("p",[e._v("现在假设需求有变，输出顺序需要调整为：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("1\n'结束了'\n2\n")])])]),t("p",[e._v("根据打印结果我们很容易想到对策，即把语句"),t("code",[e._v("obj.foo++")]),e._v("和语句"),t("code",[e._v("console.log('结束了')")]),e._v("位置互换即可。那么有没有什么办法能够在不调整代码的情况下实现需求呢？")]),e._v(" "),t("p",[e._v("这时就需要响应系统支持"),t("strong",[e._v("调度。")])]),e._v(" "),t("p",[e._v("我们可以为"),t("code",[e._v("effect")]),e._v("函数设计一个选项参数"),t("code",[e._v("options")]),e._v(",允许用户指定调度器：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("effect(\n  ()=>{\n    console.log(obj.foo)\n  },\n  //options\n  {\n    //调度器scheduler是一个函数\n    scheduler(fn){\n      //...\n    }\n  }\n)\n")])])]),t("p",[e._v("如上面的代码所示，用户在调用"),t("code",[e._v("effect")]),e._v("函数注册副作用函数时，可以传递第二个参数"),t("code",[e._v("options")]),e._v("。它是一个对象，其中允许指定"),t("code",[e._v("scheduler")]),e._v("调度函数，同时在"),t("code",[e._v("effect")]),e._v("函数内部我们需要把"),t("code",[e._v("options")]),e._v("选项挂载到对应的副作用函数上：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function effect(fn,options={}){\n  const effectFn = () =>{\n    cleanup(effectFn)\n    //当调用effect注册副作用函数时，将副作用函数复制给activeEffect\n    activeEffect = effectFn\n    //在调用副作用函数之前将当前副作用函数压栈\n    effectStack.push(effectFn)\n    fn()\n    //在当前副作用函数执行完毕后，将当前副作用函数弹出栈，并把activeEffect还原为之前的值\n    effectStack.pop()\n    activeEffect = effectStack[effectStack.length-1]\n  }\n  //将options挂载到effectFn上\n  effectFn.options = options //新增\n  //activeEffect.deps 用来存储所有与该副作用函数相关的依赖集合\n  effectFn.deps = []\n  //执行副作用函数\n  effectFn()\n}\n")])])]),t("h2",{attrs:{id:"_2-8-计算属性computed与lazy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-计算属性computed与lazy"}},[e._v("#")]),e._v(" 2.8 计算属性"),t("code",[e._v("computed")]),e._v("与"),t("code",[e._v("lazy")])]),e._v(" "),t("p",[e._v("前文介绍了"),t("code",[e._v("effect")]),e._v("函数，它用来注册副作用函数，同时它也允许指定一些选项参数"),t("code",[e._v("options")]),e._v("，例如指定"),t("code",[e._v("scheduler")]),e._v("调度器来控制副作用函数的执行时机和方式；也介绍了用来追踪和收集依赖的"),t("code",[e._v("track")]),e._v("函数，以及用来触发副作用函数重新执行的"),t("code",[e._v("trigger")]),e._v("函数。实际上，综合这些内容，我们就可以实现"),t("code",[e._v("Vue.js")]),e._v("中一个非常重要并且非常有特色的能力 ---计算属性。")]),e._v(" "),t("p",[e._v("在深入讲解计算属性之前，我们需要先来聊聊关于懒执行的"),t("code",[e._v("effect")]),e._v("，即"),t("code",[e._v("lazy")]),e._v("的"),t("code",[e._v("effect")]),e._v("。这是什么意思呢？举个例子，现在我们所实现的"),t("code",[e._v("effect")]),e._v("函数会立即执行传递给它的副作用函数，例如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("effect(\n  //这个函数会立即执行\n  ()=>{\n    console.log(obj.foo)\n  }\n)\n")])])]),t("p",[e._v("但在有些场景下，我们并不希望它立即执行，而是希望它在需要的时候踩执行，例如计算属性。这时我们可以在通过"),t("code",[e._v("options")]),e._v("中添加"),t("code",[e._v("lazy")]),e._v("属性来达到目的，如下面的代码所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("effect(\n  //指定来lazy 选项，这个函数不会立即执行\n  ()=>{\n    console.log(obj.foo)\n  },\n  //options\n  {\n    lazy:true\n  }\n)\n")])])]),t("p",[t("code",[e._v("lazy")]),e._v("选项和之前介绍的"),t("code",[e._v("scheduler")]),e._v("一样，它通过"),t("code",[e._v("options")]),e._v("选项对象指定。有了它，我们就可以修改"),t("code",[e._v("effect")]),e._v("函数的实现逻辑了， 当"),t("code",[e._v("options.lazy")]),e._v(" 为 "),t("code",[e._v("true")]),e._v("时，则不立即执行副作用函数：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function effect(fn,options = {}){\n  const effectFn = ()=>{\n    cleanup(effectFn)\n    activeEffect = effectFn\n    effectStack.push(effectFn)\n    fn()\n    effectStack.pop()\n    activeEffect = effectStack[effectStack.length-1]\n  }\n  \n  effectFn.options = options\n  effectFn.deps =[]\n  //只有非lazy的时候， 才执行\n  if(!options.lazy){ // 新增\n     // 执行副作用函数\n    effectFn()\n  }\n  // 将副作用函数作为返回值返回\n  return effectFn //新增\n}\n")])])]),t("p",[e._v("通过这个判断，我们就实现了让副作用函数不立即执行的功能。但问题是，副作用函数应该什么时候执行呢？通过上面的代码可以看到，我们将副作用函数"),t("code",[e._v("effectFn")]),e._v(" 作为"),t("code",[e._v("effect")]),e._v("函数的返回值，这就意味着当调用"),t("code",[e._v("effect")]),e._v("函数时，通过其返回值能够拿到对应的副作用函数，这样我们就能手动执行该副作用函数了：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const effectFn = effect(()=>{\n  console.log(obj.foo)\n},{lazy:true})\n\n// 手动执行副作用函数\neffectFn()\n")])])]),t("p",[e._v("如果仅仅能够手动执行副作用函数，其意义并不大。但如果我们把传递给"),t("code",[e._v("effect")]),e._v("的函数看作一个"),t("code",[e._v("getter")]),e._v("，那么这个"),t("code",[e._v("getter")]),e._v("函数可以返回任何值，例如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const effectFn = effect(\n  //getter 返回 obj.foo 与 obj.bar 的和\n  () => obj.foo + obj.bar\n  {lazy:true}\n)\n")])])]),t("p",[e._v("这样我们在手动执行副作用函数时，就能够拿到其返回值：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const effectFn = effect(\n  // getter 返回obj.foo 和 obj.bar 的和\n  ()=> obj.foo + obj.bar,\n  {lazy:true}\n)\n\n  //value 是 getter的返回值\nconst value = effectFn()\n")])])]),t("p",[e._v("为了实现这个目标，我们需要再对"),t("code",[e._v("effect")]),e._v("函数做一些修改，如下所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function effect(fn,options={}){\n\tconst effectFn = () =>{\n    cleanup(effectFn)\n    activeEffect = effectFn\n    effectStack.push(effectFn)\n    //将fn的执行结果存储到res中\n    const res = fn() //新增\n    effectStack.pop()\n    activeEffect = effectStack[effectStack.length - 1]\n    //将res作为effectFn的返回值\n    return res //新增\n  }\n  effectFn.options = options\n  effectFn.deps = []\n  if(!options.lazy){\n    effectFn()\n  }\n  return effectfn\n}\n")])])]),t("p",[e._v("通过新增的代码可以看到，传递给"),t("code",[e._v("effect")]),e._v("函数的参数"),t("code",[e._v("fn")]),e._v("才是真正的副作用函数，而"),t("code",[e._v("effectFn")]),e._v("是我们包装后的副作用函数。")]),e._v(" "),t("p",[e._v("为了通过"),t("code",[e._v("effectFn")]),e._v("得到真正的副作用函数"),t("code",[e._v("fn")]),e._v("的执行结果，我们需要将其保存到"),t("code",[e._v("res")]),e._v("变量中，然后将其作为"),t("code",[e._v("effectFn")]),e._v("函数的返回值。")]),e._v(" "),t("p",[e._v("现在我们已能够实现依赖执行的副作用函数，并且能够拿到副作用函数的执行结果了，接下来就可以实现计算属性了，如下所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function computed(getter){\n\t//把getter作为副作用函数，创建一个lazy的effect\n  const effectFn = effect(getter,{\n    \tlazy:true\n  })\n\n  const obj = {\n    // 当读取value时才执行effectFn\n    get value(){\n    \treturn effectFn()\n    }\n  }\n  return obj\n}\n")])])]),t("p",[e._v("首先我们定义一个"),t("code",[e._v("computed")]),e._v("函数，它接收一个"),t("code",[e._v("getter")]),e._v("函数作为参数，我们把"),t("code",[e._v("getter")]),e._v("函数作为副作用函数，用它创建一个"),t("code",[e._v("lazy")]),e._v("的"),t("code",[e._v("effect")]),e._v("。"),t("code",[e._v("computed")]),e._v("函数的执行会返回一个对象，该对象的"),t("code",[e._v("value")]),e._v("属性是一个访问器属性，只有读取"),t("code",[e._v("value")]),e._v("的值时，才会执行"),t("code",[e._v("effectFn")]),e._v("并将其结果作为返回值返回。")]),e._v(" "),t("p",[e._v("我们可以使用"),t("code",[e._v("computed")]),e._v("函数来创建一个计算属性：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const data = {foo:1,bar:2}\nconst obj = new Proxy(data,{/*...*/})\n\nconst sumRes = computed(()=> obj.foo+obj.bar)\nconsole.log(sumRes.value) //3\n")])])]),t("p",[e._v("可以看到它能够正确地工作， 不过现在我们实现计算属性只做到了懒计算，也就是说，只有当你真正读取"),t("code",[e._v("sumRes.value")]),e._v("的值时，它才会进行计算并得倒值。但是还做不到对值进行缓存，即假如我们多次访问"),t("code",[e._v("sumRes.value")]),e._v("的值，会导致"),t("code",[e._v("effectFn")]),e._v("进行多次计算，即使"),t("code",[e._v("obj.foo")]),e._v("和"),t("code",[e._v("obj.bar")]),e._v("的值本身并没有变化：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("console.log(sumRes.value) // 3\nconsole.log(sumRes.value) // 3\nconsole.log(sumRes.value) // 3\n")])])]),t("p",[e._v("上面的代码多次访问"),t("code",[e._v("sumRes.value")]),e._v("的值，每次访问都会调用"),t("code",[e._v("effectFn")]),e._v("重新计算。")]),e._v(" "),t("p",[e._v("为了解决这个问题，就需要我们在实现"),t("code",[e._v("computed")]),e._v("函数时，添加对值进行缓存的功能，如下代码所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function computed(getter){\n\t//value用来缓存上一次计算的值\n  let value\n  //dirty标志，用来表示是否需要重新计算值，为true则意味着“脏”，需要计算\n  let dirty = true\n\n  const effectFn = effect(getter,{\n    lazy:true\n  })\n\n  const obj = {\n    get value(){\n      //只有“脏”时才计算值，并将得到的值缓存到value中\n      if(dirty){\n        value = effectFn()\n        //将dirty设置为false,下一次访问直接使用缓存到value中的值\n        dirty = false\n      }\n      return value\n    }\n  }\n  return obj\n}\n")])])]),t("p",[e._v("我们新增了两个变量"),t("code",[e._v("value")]),e._v("和"),t("code",[e._v("dirty")]),e._v("，其中"),t("code",[e._v("value")]),e._v("用来缓存上一次计算的值，而"),t("code",[e._v("dirty")]),e._v("是一个标识，代表是否需要重新计算。 当我们通过"),t("code",[e._v("sumRes.value")]),e._v("访问值时，只有当"),t("code",[e._v("dirty")]),e._v("为"),t("code",[e._v("true")]),e._v("时，才会调用"),t("code",[e._v("effectFn")]),e._v("重新计算值，否则直接使用上一次缓存在"),t("code",[e._v("value")]),e._v("中的值。这样无论我们访问多少次"),t("code",[e._v("sumRes.value")]),e._v("，都只会在第一次访问时进行真正的计算，后续访问都会直接读取缓存的"),t("code",[e._v("value")]),e._v("值。")]),e._v(" "),t("p",[e._v("相信你已经看到问题所在了， 如果此时我们修改"),t("code",[e._v("obj.foo")]),e._v("或"),t("code",[e._v("obj.bar")]),e._v("的值，在访问"),t("code",[e._v("sumRes.value")]),e._v("会发现访问到的值没有发生变化：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const data = {foo:1,bar:2}\nconst obj = new Proxy(data,{/*...*/})\n\nconst sumRes = computed(()=> obj.foo+obj.bar)\n\nconsole.log(sumRes.value) //3\nconsole.log(sumRes.value) //3\n\n//修改obj.foo\nobj.foo++\n\n//再次访问，得到的仍然是3，但预期结果应该是4\nconsole.log(sumRes.value) //3\n")])])]),t("p",[e._v("这是因为，当第一次访问"),t("code",[e._v("sumRes.value")]),e._v("的值后，变量"),t("code",[e._v("dirty")]),e._v("会设置为"),t("code",[e._v("false")]),e._v("，代表不需要计算， 即使我们修改了"),t("code",[e._v("obj.foo")]),e._v("的值，但只要"),t("code",[e._v("dirty")]),e._v("的值为"),t("code",[e._v("false")]),e._v("，就不会重新计算， 所以导致我们得倒了错误的值。")]),e._v(" "),t("p",[e._v("解决办法很简单，当"),t("code",[e._v("obj.foo")]),e._v("或"),t("code",[e._v("obj.bar")]),e._v("的值发生变化时，只要"),t("code",[e._v("dirty")]),e._v("的值重置为"),t("code",[e._v("true")]),e._v("就可以了。 那么应该怎么做呢？")]),e._v(" "),t("p",[e._v("这时候就用到了上一节介绍的"),t("code",[e._v("scheduler")]),e._v("选项，如下代码所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function computed(getter){\n\tlet value\n  let dirty = true\n\n  const effectFn = effect(getter,{\n    lazy:true,\n    //添加调度器，在调度器中将dirty重置为true\n    scheduler(){\n      dirty = true\n    }\n  })\n\n  const obj = {\n    get value(){\n      if(dirty){\n        value = effectFn()\n        dirty = false\n      }\n      return value\n    }\n  }\n  return obj\n}\n")])])]),t("p",[e._v("我们为"),t("code",[e._v("effect")]),e._v("添加了"),t("code",[e._v("scheduler")]),e._v("调度器函数，它会在"),t("code",[e._v("getter")]),e._v("函数中所依赖的响应式数据变化时执行，这样我们在"),t("code",[e._v("scheduler")]),e._v("函数内将"),t("code",[e._v("dirty")]),e._v("重置为"),t("code",[e._v("true")]),e._v("，当下一次访问"),t("code",[e._v("sumRes.value")]),e._v("时，就会重新调用"),t("code",[e._v("effectFn")]),e._v("计算值，这样就能够得倒预期的结果了。")]),e._v(" "),t("p",[e._v("现在，我们设计的计算属性已经趋于完美了，但是还有一个缺陷，它体现在当我们在另外一个"),t("code",[e._v("effect")]),e._v("中读取计算属性时的值：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const sumRes = computed(()=> obj.foo+obj.bar)\neffect(()=>{\n\t//在该副作用函数中读取sumRes.value\n  console.log(sumRes.value)\n})\n//修改obj.foo的值\nobj.foo++\n")])])]),t("p",[e._v("如上代码所示，"),t("code",[e._v("sumRes")]),e._v("是一个计算属性， 并且在另一个"),t("code",[e._v("effect")]),e._v("的副作用函数中读取了"),t("code",[e._v("sumRes.value")]),e._v("的值。如果此时修改了"),t("code",[e._v("obj.foo")]),e._v("的值，我们期望副作用函数重新执行，就像我们在"),t("code",[e._v("Vue.js")]),e._v("的模版中读取计算属性值的时候，一旦计算属性发生变化就会触发重新渲染一样。")]),e._v(" "),t("p",[e._v("但是如果尝试运行上面这段代码，就会发现修改"),t("code",[e._v("obj.foo")]),e._v("的值并不会触发副作用函数的渲染，因此我们说这是一个缺陷。")]),e._v(" "),t("p",[e._v("分析问题的原因，我们发现，从本质上看这就是一个典型的"),t("code",[e._v("effect")]),e._v("潜套。")]),e._v(" "),t("ul",[t("li",[e._v("一个计算属性内部拥有自己的"),t("code",[e._v("effect")]),e._v("，并且它是懒执行的，只有当真正读取计算属性的值时才会执行。")]),e._v(" "),t("li",[e._v("对于计算属性的"),t("code",[e._v("getter")]),e._v("函数来说，它里面访问的响应式数据只会把"),t("code",[e._v("computed")]),e._v("内部的"),t("code",[e._v("effect")]),e._v("收集为依赖。")]),e._v(" "),t("li",[e._v("而当把计算属性用于另外一个"),t("code",[e._v("effect")]),e._v("时，就会发生"),t("code",[e._v("effect")]),e._v("潜套，外层的"),t("code",[e._v("effect")]),e._v("不会被内层"),t("code",[e._v("effect")]),e._v("中的响应式数据收集。")])]),e._v(" "),t("p",[e._v("解决的办法很简单。当读取计算属性的值时，我们可以手动调用"),t("code",[e._v("track")]),e._v("函数进行追踪；当计算属性依赖的响应式数据发生变化时，我们可以手动调用"),t("code",[e._v("trigger")]),e._v("函数触发响应：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function computed(getter){\n\tlet value \n  let dirty = true\n\n  const effectFn = effect(getter,{\n  \tlazy:true,\n    scheduler(){\n      if(!dirty){\n        dirty = true\n        //当计算属性依赖的响应式数据变化时，手动调用trigger函数触发响应\n        trigger(obj,'value')\n      }\n    }\n  })\n\n  const obj = {\n    get value(){\n      if(dirty){\n        value = effectFn()\n        dirty = false\n      }\n      // 当读取value时，手动调用track函数进行追踪\n      track(obj,'value')\n      return value\n    }\n  }\n  return obj\n}\n")])])]),t("p",[e._v("如以上代码所示，当读取一个计算属性的"),t("code",[e._v("value")]),e._v("值时，我们手动调用"),t("code",[e._v("track")]),e._v("函数，把计算属性返回的对象"),t("code",[e._v("obj")]),e._v("作为"),t("code",[e._v("target")]),e._v("，同时作为第一个参数传递给"),t("code",[e._v("track")]),e._v("函数。当计算属性所依赖的响应式数据变化时，会执行调度器函数，在调度器函数内手动调用"),t("code",[e._v("trigger")]),e._v("函数触发响应即可。这时，对于如下代码来说：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("effect(function effectFn(){\n  console.log(sumRes.value)\n})\n")])])]),t("p",[e._v("它会建立这样的联系：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("computed(obj)\n   L___ value\n      \tL___effectFn\n")])])]),t("p",[e._v("下图给出了更详细的描述：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a643a353da114f039010536c2714798c~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),t("h2",{attrs:{id:"_2-9-watch的实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-watch的实现原理"}},[e._v("#")]),e._v(" 2.9 "),t("code",[e._v("watch")]),e._v("的实现原理")]),e._v(" "),t("p",[e._v("所谓"),t("code",[e._v("watch")]),e._v("，其本质就是观测一个响应式数据，当数据发生变化时通知并执行相应的回调函数。举个例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("watch(obj,()=>{\n\tconsole.log('数据变了')\n})\n\n//修改响应数据的值，会导致回调函数执行\nobj.foo++\n")])])]),t("p",[e._v("假设"),t("code",[e._v("obj")]),e._v("是一个响应数据，使用"),t("code",[e._v("watch")]),e._v("函数观测它，并传递一个回调函数，当修改响应式数据的值时，会触发该回调函数执行。")]),e._v(" "),t("p",[e._v("实际上，"),t("code",[e._v("watch")]),e._v("的实现本质上就是利用了"),t("code",[e._v("effect")]),e._v("以及"),t("code",[e._v("options.scheduler")]),e._v("选项，如以下代码所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("effect(()=>{\n  console.log(obj.foo)\n},{\n  scheduler(){\n    //当obj.foo的值变化时，会执行scheduler调度函数\n  }\n})\n")])])]),t("p",[e._v("在一个副作用函数中访问响应式数据"),t("code",[e._v("obj.foo")]),e._v("，通过前面的介绍，我们知道这会在副作用函数与响应式数据之间建立联系，当响应式数据变化时，会触发副作用函数重新执行。")]),e._v(" "),t("p",[e._v("但有一个例外，即如果副作用函数存在"),t("code",[e._v("scheduler")]),e._v("选项，当响应式数据发生变化时，会触发"),t("code",[e._v("scheduler")]),e._v("调度函数执行，而非直接触发副作用函数执行。")]),e._v(" "),t("p",[e._v("从这个角度来看，其实"),t("code",[e._v("scheduler")]),e._v("调度函数就是相当于一个回调函数，而"),t("code",[e._v("watch")]),e._v("的实现就是利用了这个特点。下面是最简单的"),t("code",[e._v("watch")]),e._v("函数的实现：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//watch函数接受两个参数，source是响应式数据，cb是回调函数\nfunction watch(source,cb){\n\teffect(\n    //触发读取操作，从而建立联系\n  ()=> source.foo,\n    {\n      scheduler(){\n        //当数据变化时，调用回调函数cb\n        cb()\n      }\n    }\n  )\n}\n")])])]),t("p",[e._v("我们可以如下所示使用"),t("code",[e._v("watch")]),e._v("函数：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const data = {foo:1}\nconst obj = new Proxy(data,{/*...*/})\nwatch(obj,()=>{\n  console.log('数据变化了')\n})\nobj.foo++\n")])])]),t("p",[e._v("上面这段代码能正常工作， 但是我们注意到在"),t("code",[e._v("watch")]),e._v("函数的实现中，硬编码了对"),t("code",[e._v("source.foo")]),e._v("的读取操作。")]),e._v(" "),t("p",[e._v("换句话说，现在只能观测"),t("code",[e._v("obj.foo")]),e._v("的改变。为了让"),t("code",[e._v("watch")]),e._v("函数具有通用性，我们需要一个封装一个通用的读取的读取操作：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function watch(source,cb){\n\teffect(\n    // 调用traverse递归地读取\n    ()=> traverse(source),\n    {\n      scheduler(){\n        //当数据变化时，调用回调函数cb\n        cb()\n      }\n    }\n  )\n}\n\nfunction traverse(value,seen=new Set()){\n  //如果读取的数据是原始值，或者已经被读取过了，那么什么都不做\n  if(typeof value !== 'object' || value === null || seen.has(value)) return\n  //将数据添加到seen中，代表遍历地读取过了， 避免循环引用引起的死循环\n  seen.add(value)\n  //暂时不考虑数组等其他结构\n  //假设value就是一个对象，使用for...in 读取对象的每一个值，并递归调用traverse进行处理\n  for(const k in value){\n    traverse(value[k],seen)\n  }\n  return value\n}\n")])])]),t("p",[e._v("如上面的代码所示，在"),t("code",[e._v("watch")]),e._v("内部的"),t("code",[e._v("effect")]),e._v("中调用"),t("code",[e._v("traverse")]),e._v("函数进行递归的读取操作，代替硬编码的方式，这样就能读取一个对象上的任意属性，从而当任意属性发生变化时都能触发回调函数执行。")]),e._v(" "),t("p",[t("code",[e._v("watch")]),e._v("函数除了可以观测响应式数据，还可以接受一个"),t("code",[e._v("getter")]),e._v("函数：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("watch(\n  //getter函数\n  ()=> obj.foo,\n  //回调函数\n  ()=>{\n    console.log('obj.foo 的值变了')\n  }\n)\n")])])]),t("p",[e._v("如以上代码所示，传递给"),t("code",[e._v("watch")]),e._v("函数的第一个参数不再是一个响应式数据，而是一个"),t("code",[e._v("getter")]),e._v("函数。在"),t("code",[e._v("getter")]),e._v("函数内部，用户可以指定该"),t("code",[e._v("watch")]),e._v("依赖哪些响应式数据，只有当这些数据变化时，才会触发回调函数执行。如下代码实现了这一功能：\\")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function watch(source,cb){\n  //定义getter\n  let getter\n  //如果source是函数，说明用户传递的是getter，所以直接把source赋值给getter\n  if(typeof source === 'function'){\n    getter = source\n  }else{\n    //否则按照原来的实现调用traverse递归地读取\n    getter = () => traverse(source)\n  }\n  effect(\n    //执行 getter\n    () => getter(),\n    {\n      scheduler(){\n        cb()\n    }\n  )\n}\n")])])]),t("p",[e._v("首先判断"),t("code",[e._v("source")]),e._v("的类型，如果是函数类型，说明用户直接传递了"),t("code",[e._v("getter")]),e._v("函数， 这时直接使用用户的"),t("code",[e._v("getter")]),e._v("函数；如果不是函数类型，那么保留之前的做法，即调用"),t("code",[e._v("traverse")]),e._v("函数递归地读取。这样就实现了自定义"),t("code",[e._v("getter")]),e._v("的功能，同时使得"),t("code",[e._v("watch")]),e._v("函数更加强大。。")]),e._v(" "),t("p",[e._v("仔细观察你可能会注意到，现在的实现还缺少了一个非常重要的能力，即在回调函数中拿不到旧值与新值。通常我们在使用"),t("code",[e._v("Vue.js")]),e._v("中的"),t("code",[e._v("watch")]),e._v("函数时，能够在回调函数中得倒变化前后的值；")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("watch(\n  () => obj.foo,\n  (newValue,oldValue) =>{\n    console.log(newValue,oldValue) // 2,1\n  }\n)\n\nobj.foo++\n")])])]),t("p",[e._v("那么如何获得新值与旧值呢？这需要充分利用"),t("code",[e._v("effect")]),e._v("函数的"),t("code",[e._v("lazy")]),e._v("选项 ， 如下代码所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function watch(source,obj){\n\tlet getter\n  if(typeof source === 'function'){\n    getter = source\n  }else{\n    getter = () => traverse(source)\n  }\n\n  //定义旧值与新值\n  let objValue, newValue\n  //使用effect注册副作用函数时，开启lazy选项，并把返回值存储到effectFn中以便后续手动调用\n  const effectFn = effect(\n    ()=> getter(),\n    {\n      lazy:true,\n      scheduler(){\n        //在scheduler 中重新执行副作用函数，得到的是新值\n        newValue = effectFn()\n        // 将旧值和新值作为回调函数的参数\n        cb(newValue,oldValue)\n        //更新旧值，不然下一次会得到错误的旧值\n        oldValue = newValue\n      }\n    }\n  )\n  //手动调用副作用函数，拿到的值就是旧值\n  oldValue = effectFn()\n}\n")])])]),t("p",[e._v("在这段代码中， 最核心的改动就是使用"),t("code",[e._v("lazy")]),e._v("选项创建了一个懒执行的"),t("code",[e._v("effect")]),e._v("。注意上面代码中最下面的部分，我们手动调用"),t("code",[e._v("effectFn")]),e._v("函数得到的返回值就是旧值，即第一次执行的到的值。")]),e._v(" "),t("p",[e._v("当变化发生并触发"),t("code",[e._v("scheduler")]),e._v("调度函数执行时，会重新调用"),t("code",[e._v("effectFn")]),e._v("函数并得到新值，这样我们就拿到了旧值与新值，接着将它们作为参数传递给回调函数"),t("code",[e._v("cb")]),e._v("就可以了。最后一件非常重要的事情是，不要忘记使用新值更新旧值："),t("code",[e._v("oldValue = newValue")]),e._v(",否则在下一次变更发生时会得到错误的旧值。")]),e._v(" "),t("h2",{attrs:{id:"_2-10-立即执行的watch与回调执行时机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-立即执行的watch与回调执行时机"}},[e._v("#")]),e._v(" 2.10 立即执行的"),t("code",[e._v("watch")]),e._v("与回调执行时机")]),e._v(" "),t("p",[e._v("上一节，我们介绍了"),t("code",[e._v("watch")]),e._v("的基本实现。在这个过程中我们认识到，"),t("code",[e._v("watch")]),e._v("的本质其实是对"),t("code",[e._v("effect")]),e._v("的二次封装。本节我们继续讨论关于"),t("code",[e._v("watch")]),e._v("的两个特性：一个是立即执行的回调函数，另一个是回调函数的执行时机。")]),e._v(" "),t("p",[e._v("首先来看立即执行的回调函数。默认情况下，一个"),t("code",[e._v("watch")]),e._v("的回调只会在响应式数据发生变化时才执行：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//回调函数只有在响应式数据obj后续发生变化时才执行\nwatch(obj,()=>{\n  console.log('变化了')\n})\n")])])]),t("p",[e._v("在"),t("code",[e._v("Vue.js")]),e._v("中可以通过选项参数"),t("code",[e._v("immdiate")]),e._v("来指定回调是否需要立即执行：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("watch(obj,()=>{\n  console.log('变化了')\n},{\n  //回调函数会在watch创建时立即执行一次\n  immediate:true\n})\n")])])]),t("p",[e._v("当"),t("code",[e._v("immediate")]),e._v("选项存在并且为"),t("code",[e._v("true")]),e._v("时，回调函数会在该"),t("code",[e._v("watch")]),e._v("创建时立即执行一次。仔细思考就会发现，回调函数的立即执行与后续执行本质上没有任何差异，所以我们可以把"),t("code",[e._v("scheduler")]),e._v("调度函数封装为一个通用函数，分别在初始化和变更时执行它，如下代码所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function watch(source,cb,options ={}){\n  let getter\n  if(typeof source === 'function'){\n    getter = source\n  }else{\n    getter = () => traverse(source)\n  }\n  let oldValue,newValue\n\n  //提取scheduler调度函数为一个独立的job函数\n  const job = () => {\n    newValue = effectFn()\n    cb(newValue,oldValue)\n    oldValue = newValue\n  }\n\n  const effectFn = effect(\n    //执行getter\n    () => getter(),\n    {\n      lazy:true,\n      //使用job函数作为调度函器函数\n      scheduler:job\n    }\n  )\n\n  if(options.immediate){\n    //当immediate为true时立即执行job,从而触发回调执行\n    job()\n  }else{\n    oldValue = effectFn()\n  }\n}\n")])])]),t("p",[e._v("这样就实现了回调函数的立即执行功能。由于回调函数是立即执行的，所以第一次回调执行时没有所谓的旧值，因此此时回调函数的"),t("code",[e._v("oldValue")]),e._v("值为"),t("code",[e._v("undefined")]),e._v("，这也是符合预期的。")]),e._v(" "),t("p",[e._v("除了指定回调函数为立即执行之外，还可以通过其他选项参数来指定回调函数的执行时机，例如在"),t("code",[e._v("Vue.js3")]),e._v("中使用"),t("code",[e._v("flush")]),e._v("选项来指定：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("watch(obj,()=>{\n  console.log('变化了')\n},{\n  //回调函数会在watch创建时立即执行一次\n  flush:'pre' //还可以指定为'post' | 'sync'\n})\n")])])]),t("p",[t("code",[e._v("flush")]),e._v("本质上是在指定调度函数的执行时机。前文讲解过如何在微任务队列中执行调度函数"),t("code",[e._v("scheduler")]),e._v("，这与"),t("code",[e._v("flush")]),e._v("的功能相同。当"),t("code",[e._v("flush")]),e._v("的值为"),t("code",[e._v("'post'")]),e._v("时，代表调度函数需要将副作用函数放到一个微任务队列中，并等待"),t("code",[e._v("DOM")]),e._v("更新结束后再执行，我们可以用如下代码进行模拟：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function watch(source,cb,options ={}){\n\tlet getter\n  if(typeof source === 'function'){\n    getter = source\n  }else{\n    getter = () => traverse(source)\n  }\n\n  let oldValue,newValue\n\n  const job = () =>{\n    newValue = effectFn()\n    cb(newValue,oldValue)\n    oldValue = newValue\n  }\n\n  const effectFn = effect(\n    //执行getter\n    ()=> getter(),\n    {\n      lazy:true,\n      scheduler:()=>{\n        //在调度函数中判断flush是否为'post'\t，如果是，将其放到微任务队列中执行\n        if(options.flush === 'post'){\n          const p = Promise.resolve()\n          p.then(job)\n        }else{\n          job()\n        }\n      }\n    }\n  )\n\n  if(options.immediate){\n    job()\n  }else{\n    oldValue = effectFn()\n  }\n}\n")])])]),t("p",[e._v("如以上代码所示，我们修改了调度器函数"),t("code",[e._v("scheduler")]),e._v("的实现方式，在调度器函数内检测"),t("code",[e._v("options.flush")]),e._v("的值是否为"),t("code",[e._v("post")]),e._v("，如果是，则将"),t("code",[e._v("job")]),e._v("函数放到微任务队列中，从而实现异步延迟执行；否则直接执行"),t("code",[e._v("job")]),e._v("函数，这本质上相当于"),t("code",[e._v("sync")]),e._v("的实现机制，即同步执行。")]),e._v(" "),t("p",[e._v("对于"),t("code",[e._v("options.flush")]),e._v("的值为"),t("code",[e._v("'pre'")]),e._v("的情况，我们暂时还没有办法模拟，因为这涉及组件的更新时机，其中"),t("code",[e._v("'pre'")]),e._v("和"),t("code",[e._v("'post'")]),e._v("原本的语义指的就是组件更新前和更新后，不过这并不影响我们理解如何控制回调函数的更新时机。")]),e._v(" "),t("h2",{attrs:{id:"_2-11-过期的副作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-11-过期的副作用"}},[e._v("#")]),e._v(" 2.11 过期的副作用")]),e._v(" "),t("p",[e._v("竞态问题通常在多进程或多线程编程中被提及，前端工程师可能很少讨论它，但在日常工作中你可能早就遇到过竞态问题相似的场景，举个例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let finalData\n\nwatch(obj,async()=>{\n  //发送并等待网络请求\n  const res = await fetch('/path/to/request')\n  //将请求结果赋值给data\n  finalData = res\n})\n")])])]),t("p",[e._v("在这段代码中，我们使用"),t("code",[e._v("watch")]),e._v("观测"),t("code",[e._v("obj")]),e._v("对象的变化，每次"),t("code",[e._v("obj")]),e._v("对象发生变化都会发送网络请求，例如请求接口数据，等数据请求成功后，将结果赋值给"),t("code",[e._v("finalData")]),e._v("变量。")]),e._v(" "),t("p",[e._v("观察上面的代码，乍一看似乎没什么问题。但仔细思考会发现这段代码会发生竞态问题。")]),e._v(" "),t("p",[e._v("假设我们第一次修改"),t("code",[e._v("obj")]),e._v("对象的某个字段值，这会导致回调函数执行，同时发送了第一次请求A 。")]),e._v(" "),t("p",[e._v("随着时间的推移，在请求A的结果返回之前，我们对"),t("code",[e._v("obj")]),e._v("对象的某个字段值进行了第二次请求修改，这会导致发生第二次请求B。")]),e._v(" "),t("p",[e._v("此时请求A和请求B都在进行中，那么哪一个请求会先返回结果呢？我们不确定，如果请求B先于请求A返回结果，就会导致最终"),t("code",[e._v("finalData")]),e._v("中存储的是A请求的结果，如图所示：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f907475f96db46598cb47ce89052b296~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),t("p",[e._v("但由于请求B是后发送的，因此我们认为请求B返回的数据才是“最新”的，而请求A则应该被视为“过期”的，所以我们希望变量"),t("code",[e._v("finalData")]),e._v("存储的值应该是由请求B返回的结果，而非请求A返回的结果。")]),e._v(" "),t("p",[e._v("实际上，我们可以对这个问题做进一步总结。请求A是副作用函数第一次执行所产生的副作用，请求B是副作用函数第二次执行所产生的副作用。由于请求B后发生，所以请求B的结果应该被视为“最新”的，而请求A已经“过期”了，其产生的结果应被视为无效。通过这种方式，就可以避免竞态问题导致的错误结果。")]),e._v(" "),t("p",[e._v("归根结底，我们需要的是一个让副作用过期的手段。为了让问题更加清晰，我们先拿"),t("code",[e._v("Vue.js")]),e._v("中的"),t("code",[e._v("watch")]),e._v("函数来浮现场景，看看"),t("code",[e._v("Vue.js")]),e._v("是如何帮助开发者解决这个问题的，然后尝试实现这个功能。")]),e._v(" "),t("p",[e._v("在"),t("code",[e._v("Vue.js")]),e._v("中，"),t("code",[e._v("watch")]),e._v("函数的回调函数接受第三个参数"),t("code",[e._v("onInvalidate")]),e._v("，它是一个函数，类似于时间监听器，我们可以用"),t("code",[e._v("onInvalidate")]),e._v("函数注册一个回调，这个回调函数会在当副作用函数过期时执行：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("watch(obj,async(newValue,oldValue,onInvalidate)=>{\n  //定义一个标志，代表当前副作用函数是否过期，默认为false，代表没有过期\n  let expired = false\n  //调用onInvalidate() 函数注册一个过期回调\n  onInvalidate(() =>{\n    //当过期时，将expired设置为true\n    expired = true\n  })\n\n  //发送网络请求\n  const res = await fetch('/path/to/request')\n\n  //只有当该副作用函数的执行没有过期时，才会执行后续操作\n  if(!expired){\n    finalData = res\n  }\n})\n")])])]),t("p",[e._v("如上面的代码所示，在发送请求之前，我们定义了"),t("code",[e._v("expired")]),e._v("标志变量，用来标识当前副作用函数的执行是否过期；接着调用"),t("code",[e._v("onInvalidate")]),e._v("函数注册了一个过期回调，当该副作用函数的执行过期时将"),t("code",[e._v("expired")]),e._v("标志变量设置为"),t("code",[e._v("true")]),e._v("；最后只有当没有过期时才采用请求结果，这样就可以有效的避免上述问题了。")]),e._v(" "),t("p",[e._v("那么"),t("code",[e._v("Vue.js")]),e._v("是怎么做到的呢？换句话说，"),t("code",[e._v("onInvalidate")]),e._v("的原理是什么呢？其实很简单，在"),t("code",[e._v("watch")]),e._v("内部每次检测到变更后，在副作用函数重新执行之前，会先调用我们通过"),t("code",[e._v("onInvalidate")]),e._v("函数注册的过期回调，仅此而已，如下代码所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function watch(source,cb,options={}){\n  let getter\n  if(typeof source === 'function'){\n    getter = source\n  }else{\n    getter = () => traverse(source)\n  }\n\n  let oldValue,newValue\n\n  //cleanup 用来存储用户注册的过期回调\n  let cleanup\n  //定义onInvalidate函数  \n  function onInvalidate(fn){\n    //将过期回调存储到cleanup中\n    cleanup = fn\n  }\n\n  const job = ()=>{\n    newValue = effectFn()\n    //在调用回调函数cb之前，先调用过期回调\n    if(cleanup){\n      cleanup()\n    }\n    //将onInvalidate作为回调函数的第三个参数，以便用户使用\n    cb(oldValue,newValue,onInvalidate)\n    oldValue = newValue\n  }\n\n  const effectFn = effect(\n    //执行getter\n    ()=>getter(),\n    {\n      lazy:true,\n      scheduler:()=>{\n        if(options.flush === 'post'){\n          const p = Promise.resolve()\n          p.then(job)\n        }else{\n          job()\n        }\n      }\n    }\n  )\n\n  if(options.immediate){\n    job()\n  }else{\n    oldValue = effectFn()\n  }\n}\n")])])]),t("p",[e._v("在这段代码中，我们首先定义了"),t("code",[e._v("cleanup")]),e._v("变量，这个变量用来存储用户通过"),t("code",[e._v("onInvalidate")]),e._v("函数注册的过期函回调。可以看到"),t("code",[e._v("onInvalidate")]),e._v("函数的实现非常简单，只是把过期回赋值给了"),t("code",[e._v("cleanup")]),e._v("变量。这里的关键点在"),t("code",[e._v("job")]),e._v("函数内，每次执行回调函数"),t("code",[e._v("cb")]),e._v("之前，先检查是否存在过期回调，如果存在，则执行过期回调函数"),t("code",[e._v("cleanup")]),e._v("。最后我们把"),t("code",[e._v("onInvaidate")]),e._v("函数作为回调函数的第三个参数传递给"),t("code",[e._v("cb")]),e._v("，以便用户使用。")]),e._v(" "),t("p",[e._v("我们还是痛殴一个例子来进一步说明：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("watch(obj,async(newValue,oldValue,onInvalidate)=>{\n  let expired = false\n  onInvalidate(()=>{\n    expired = true\n  })\n\n  const res = await fetch('path/to/request')\n\n  if(!expired){\n    finalData = res\n  }\n})\n\n//第一次修改\nobj.foo++\nsetTimeout(()=>{\n  //200ms后做第二次修改\n\tobj.foo++\n},200)\n")])])]),t("p",[e._v("如上代码所示，我们修改了两次"),t("code",[e._v("obj.foo")]),e._v("的值，第一次修改是立即执行的，这会导致"),t("code",[e._v("watch")]),e._v("的回调函数执行。")]),e._v(" "),t("p",[e._v("由于我们在回调函数内调用了"),t("code",[e._v("onInvalidate")]),e._v("，所以会注册一个过期回调，接着发送请求A。")]),e._v(" "),t("ul",[t("li",[e._v("假设请求A需要1000ms才能返回结果，而我们在200ms时第二次修改了"),t("code",[e._v("obj.foo")]),e._v("的值，这又会导致"),t("code",[e._v("watch")]),e._v("的回调函数执行。")]),e._v(" "),t("li",[e._v("这时需要注意的是，在我们的实现中，每次执行回调函数之前要先检查过期回调是否存在，如果存在，会优先执行过期回调。")]),e._v(" "),t("li",[e._v("由于在"),t("code",[e._v("watch")]),e._v("的回调函数第一次执行的时候，我们已经注册了一个过期回调，所以在"),t("code",[e._v("watch")]),e._v("的回调函数第二次执行之前，会优先执行之前注册的过期回调，这会使得第一次执行的副作用函数内闭包的变量"),t("code",[e._v("expired")]),e._v("的值变为"),t("code",[e._v("true")]),e._v("，即副作用函数的执行过期了。")]),e._v(" "),t("li",[e._v("于是等请求A的结果返回时，其结果会被抛弃，从而避免了过期的副作用函数带来的影响，如图所示：")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/540823c6db5d4709bc780fc4c4ddf5de~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),e._v(" "),t("h1",{attrs:{id:"三、总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、总结"}},[e._v("#")]),e._v(" 三、总结")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("首先介绍了副作用函数和响应式数据的概念，以及它们之间的关系。")]),e._v(" "),t("ul",[t("li",[e._v("一个响应式数据最基本的实现依赖于对“读取”和“设置”操作的拦截，从而在副作用函数与响应式数据之间建立联系。")]),e._v(" "),t("li",[e._v("当“读取”操作发生时，我们将当前执行的副作用函数存储到“桶”中；")]),e._v(" "),t("li",[e._v("当“设置”操作发生时，再将副作用函数从“桶”里取出并执行")])])])]),e._v(" "),t("p",[e._v("以上就是响应式系统的根本实现原理。")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("接着，我们实现了一个相对完善的响应系统。")]),e._v(" "),t("ul",[t("li",[e._v("使用"),t("code",[e._v("WeakMap")]),e._v("配合"),t("code",[e._v("Map")]),e._v("构建了新的“桶”结构，从而能够在响应式数据与副作用函数之间建立更加精确的联系。")]),e._v(" "),t("li",[e._v("同时，也介绍了"),t("code",[e._v("WeakMap")]),e._v("与"),t("code",[e._v("Map")]),e._v("这两个数据结构的区别：\n"),t("ul",[t("li",[t("code",[e._v("WeakMap")]),e._v("是弱引用，它不影响垃圾回收器的工作。")]),e._v(" "),t("li",[e._v("当用户代码对一个对象没有引用关系时，"),t("code",[e._v("WeakMap")]),e._v("不回阻止垃圾回收器回收该对象")])])])])])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("讨论了分支切换导致的冗余副作用问题，这个问题会导致副作用函数进行不必要的更新。")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("为了解决这个问题，我们需要在每次副作用函数重新执行之前， 清除上一次建立的响应联系，而当副作用函数重新执行后，会再次建立新的响应联系，新的响应联系中不存在冗余副作用问题，从而解决了问题。")])]),e._v(" "),t("li",[t("p",[e._v("但在此过程中，我们还遇到了便历"),t("code",[e._v("Set")]),e._v("数据结构导致无限循环的新问题，")]),e._v(" "),t("ul",[t("li",[e._v("该问题产生的原因可以从"),t("code",[e._v("ECMA")]),e._v("规范中得知：即“在调用"),t("code",[e._v("forEach")]),e._v("遍历"),t("code",[e._v("Set")]),e._v("集合时，如果一个值已经被访问过了，但这个值被删除并重新添加到集合，如果此时"),t("code",[e._v("forEach")]),e._v("遍历没有结束，那么这个值会被重新访问”。")]),e._v(" "),t("li",[e._v("解决方案是建立一个新的"),t("code",[e._v("Set")]),e._v("数据结构用来遍历。")])])])])]),e._v(" "),t("li",[t("p",[e._v("讨论了关于嵌套的副作用函数的问题。在实际场景中，嵌套的副作用函数发生在组件嵌套的场景中，即父子组件关系。")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("这时为了避免在响应式数据与副作用函数之间建立的响应联系发生错乱，我们需要使用副作用函数栈来存储不同的副作用函数。")]),e._v(" "),t("ul",[t("li",[e._v("当一个副作用函数执行完毕后，将其从栈中弹出。")]),e._v(" "),t("li",[e._v("当读取响应式数据的时候，被读取的响应式数据只会与当前栈顶的副作用函数建立响应联系，从而解决问题。")])])]),e._v(" "),t("li",[t("p",[e._v("而后，我们遇到了副作用函数无限递归调用自身，导致栈溢出的问题。")]),e._v(" "),t("ul",[t("li",[e._v("该问题的根本原因在于，对响应式数据的读取和设置操作发生在同一个副作用函数内。")]),e._v(" "),t("li",[e._v("解决办法很简单："),t("strong",[e._v("如果")]),t("code",[e._v("trigger")]),t("strong",[e._v("触发执行的副作用函数与当前正在执行的副作用函数相同，则不触发执行。")])])])])])])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("随后，我们讨论了响应系统的可调度性。")]),e._v(" "),t("ul",[t("li",[e._v("所谓可调度，指的是当"),t("code",[e._v("trigger")]),e._v("动作触发副作用函数重新执行时，有能力决定副作用函数执行的实机、次数以及方式。")]),e._v(" "),t("li",[e._v("为了实现调度能力，我们为"),t("code",[e._v("effect")]),e._v("函数增加了第二个选项参数，可以通过"),t("code",[e._v("scheduler")]),e._v("选项指定调用器，这样用户可以通过调度器自行完成任务的调度。")]),e._v(" "),t("li",[e._v("如何通过调度器实现任务去重，即通过一个微任务队列对任务进行缓存，从而实现去重。")])])]),e._v(" "),t("li",[t("p",[e._v("而后，讲解了计算属性，即"),t("code",[e._v("computed")]),e._v("。")]),e._v(" "),t("ul",[t("li",[e._v("计算属性实际上是一个懒执行的副作用函数，我们通过"),t("code",[e._v("lazy")]),e._v("选项使得副作用函数可以懒执行。")]),e._v(" "),t("li",[e._v("被标记为懒执行的副作用函数可以通过手动方式让其执行。")]),e._v(" "),t("li",[e._v("利用这个特点，我们设计了计算属性，当读取计算属性的值时，只需要手动执行副作用函数即可。")]),e._v(" "),t("li",[e._v("当计算属性依赖的响应式数据发生变化时，会通过"),t("code",[e._v("scheduler")]),e._v("将"),t("code",[e._v("dirty")]),e._v("标记设置为"),t("code",[e._v("true")]),e._v("，代表“脏”。")]),e._v(" "),t("li",[e._v("这样，下次读取计算属性的值时，我们会重新计算真正的值。")])])]),e._v(" "),t("li",[t("p",[e._v("之后，我们讨论了"),t("code",[e._v("watch")]),e._v("的实现原理，它本质上利用了副作用函数重新执行时的可调度行。")]),e._v(" "),t("ul",[t("li",[e._v("一个"),t("code",[e._v("watch")]),e._v("本身会创建一个"),t("code",[e._v("effect")]),e._v("，当这个"),t("code",[e._v("effect")]),e._v("依赖的响应式数据发生变化时，会执行该"),t("code",[e._v("scheduler")]),e._v("中执行用户通过"),t("code",[e._v("watch")]),e._v("函数注册的回调函数即可。")]),e._v(" "),t("li",[e._v("此外，讲解了理解执行回调的"),t("code",[e._v("watch")]),e._v("，通过添加新的"),t("code",[e._v("immediate")]),e._v("选项来实现")]),e._v(" "),t("li",[e._v("还讨论了，如何控制回调函数的执行时机，通过"),t("code",[e._v("flush")]),e._v("选项来制定回调函数具体的执行时机，本质上是利用了调用器和一步的微任务队列。")])])]),e._v(" "),t("li",[t("p",[e._v("最后，我们讨论了过期的副作用函数，他会导致竞态问题。")]),e._v(" "),t("ul",[t("li",[e._v("为了解决这个问题，"),t("code",[e._v("Vue.js")]),e._v("为"),t("code",[e._v("watch")]),e._v("的回调函数设计了第三个参数，即"),t("code",[e._v("onInvalidate")]),e._v("。\n"),t("ul",[t("li",[e._v("它是一个函数，用来注册过期回调。")]),e._v(" "),t("li",[e._v("每当"),t("code",[e._v("watch")]),e._v("的回调函数执行之前，会优先执行用户通过"),t("code",[e._v("onInvalidate")]),e._v("注册的过期回调。")]),e._v(" "),t("li",[e._v("这样，用户就有机会在过期回调中将上一次的副作用标记为“过期”，从而解决竞态问题。")])])])])])])])}),[],!1,null,null,null);t.default=c.exports}}]);