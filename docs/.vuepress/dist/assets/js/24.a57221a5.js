(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{428:function(t,e,n){"use strict";n.r(e);var r=n(2),v=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"一、渐进式框架"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、渐进式框架"}},[t._v("#")]),t._v(" 一、渐进式框架")]),t._v(" "),e("p",[t._v("Vue 是一个框架，也是一个生态。其功能覆盖了大部分前端开发常见的需求。但 Web 世界是十分多样化的，不同的开发者在 Web 上构建的东西可能在形式和规模上会有很大的不同。考虑到这一点，Vue 的设计非常注重灵活性和“可以被逐步集成”这个特点。")]),t._v(" "),e("p",[t._v("根据你的需求场景，你可以用不同的方式使用 Vue：")]),t._v(" "),e("ul",[e("li",[t._v("无需构建步骤，渐进式增强静态的 HTML")]),t._v(" "),e("li",[t._v("在任何页面中作为 "),e("code",[t._v("Web Components")]),t._v("嵌入")]),t._v(" "),e("li",[t._v("单页应用 (SPA)")]),t._v(" "),e("li",[t._v("全栈 / 服务端渲染 (SSR)")]),t._v(" "),e("li",[t._v("Jamstack / 静态站点生成 (SSG)")]),t._v(" "),e("li",[t._v("开发桌面端、移动端、WebGL，甚至是命令行终端中的界面")])]),t._v(" "),e("h1",{attrs:{id:"二、单文件组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、单文件组件"}},[t._v("#")]),t._v(" 二、单文件组件")]),t._v(" "),e("p",[t._v("在大多数启用了构建工具的 "),e("code",[t._v("Vue")]),t._v("项目中，我们可以使用一种类似"),e("code",[t._v("HTML")]),t._v("格式的文件来书写"),e("code",[t._v("Vue")]),t._v("组件，它被称为"),e("strong",[t._v("单文件组件")]),t._v(" (也被称为"),e("code",[t._v("*.vue")]),t._v("文件，英文"),e("code",[t._v("Single-File Components")]),t._v("，缩写为 "),e("strong",[t._v("SFC")]),t._v(")。")]),t._v(" "),e("p",[t._v("单文件组件的用法以及用途。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<script>\nexport default {\n  data() {\n    return {\n      greeting: 'Hello World!'\n    }\n  }\n}\n<\/script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>\n")])])]),e("h2",{attrs:{id:"为什么要使用sfc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用sfc"}},[t._v("#")]),t._v(" 为什么要使用SFC？")]),t._v(" "),e("p",[t._v("使用SFC必须使用构建工具，但作为回报带来以下几个优点：")]),t._v(" "),e("ul",[e("li",[t._v("使用熟悉的"),e("code",[t._v("HTML")]),t._v("、"),e("code",[t._v("CSS")]),t._v("和"),e("code",[t._v("JavaScript")]),t._v("语法编写模块化的组件")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://cn.vuejs.org/guide/scaling-up/sfc.html#what-about-separation-of-concerns",target:"_blank",rel:"noopener noreferrer"}},[t._v("让本来就强相关的关注点自然内聚"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("预编译模板，避免运行时的编译开销")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://cn.vuejs.org/api/sfc-css-features.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("组件作用域的 CSS"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://cn.vuejs.org/api/sfc-script-setup.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("在使用组合式 API 时语法更简单"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("通过交叉分析模板和逻辑代码能进行更多编译时优化")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://cn.vuejs.org/guide/scaling-up/tooling.html#ide-support",target:"_blank",rel:"noopener noreferrer"}},[t._v("更好的 IDE 支持"),e("OutboundLink")],1),t._v("，提供自动补全和对模板中表达式的类型检查")]),t._v(" "),e("li",[t._v("开箱即用的模块热更新 (HMR) 支持")])]),t._v(" "),e("p",[t._v("SFC是Vue框架提供的一个功能，并且在下列场景中都是官方推荐的项目组织方式：")]),t._v(" "),e("ul",[e("li",[t._v("单页面应用（SPA）")]),t._v(" "),e("li",[t._v("静态站点生产（SSG）")]),t._v(" "),e("li",[t._v("任何值得引入构建步骤以获得更好的开发体验（DX）的项目。")])]),t._v(" "),e("p",[t._v("当然，在一些轻量级场景下使用SFC会显得有些杀鸡用牛刀。")]),t._v(" "),e("p",[t._v("因此，Vue同样也可以在无构建步骤的情况下以纯"),e("code",[t._v("JavaScript")]),t._v("方式使用。比如，你的用例只需要给静态"),e("code",[t._v("HTML")]),t._v("添加一些简单的交互，你可以看看")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("petite-vue")]),t._v("，它是一个 6 kB 左右、预优化过的 Vue 子集，更适合渐进式增强的需求。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/vuejs/petite-vue",target:"_blank",rel:"noopener noreferrer"}},[t._v("petitie-vue"),e("OutboundLink")],1),t._v("："),e("a",{attrs:{href:"https://github.com/vuejs/petite-vue",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/vuejs/petite-vue"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"sfc是如何工作的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sfc是如何工作的"}},[t._v("#")]),t._v(" SFC是如何工作的？")]),t._v(" "),e("p",[t._v("Vue SFC 是一个框架指定的文件格式，因此必须交由 "),e("a",{attrs:{href:"https://github.com/vuejs/core/tree/main/packages/compiler-sfc",target:"_blank",rel:"noopener noreferrer"}},[t._v("@vue/compiler-sfc"),e("OutboundLink")],1),t._v(" 编译为标准的 JavaScript 和 CSS，一个编译后的 SFC 是一个标准的 JavaScript(ES) 模块，这也意味着在构建配置正确的前提下，你可以像导入其他 ES 模块一样导入 SFC：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import MyComponent from './MyComponent.vue'\n\nexport default {\n  components: {\n    MyComponent\n  }\n}\n")])])]),e("p",[t._v("SFC 中的 "),e("code",[t._v("<style>")]),t._v("标签一般会在开发时注入成原生的 "),e("code",[t._v("<style>")]),t._v("标签以支持热更新，而生产环境下它们会被抽取、合并成单独的 "),e("code",[t._v("CSS")]),t._v(" 文件。")]),t._v(" "),e("p",[t._v("在实际项目中，我们一般会使用集成了 SFC 编译器的构建工具，比如 "),e("a",{attrs:{href:"https://cn.vitejs.dev/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vite"),e("OutboundLink")],1),t._v(" 或者 "),e("a",{attrs:{href:"https://cli.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue CLI"),e("OutboundLink")],1),t._v(" (基于 "),e("a",{attrs:{href:"https://webpack.js.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("webpack"),e("OutboundLink")],1),t._v(")，Vue 官方也提供了脚手架工具来帮助你尽可能快速地上手开发 SFC。")]),t._v(" "),e("p",[t._v("更多细节请查看 "),e("a",{attrs:{href:"https://cn.vuejs.org/guide/scaling-up/tooling.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("SFC 工具链"),e("OutboundLink")],1),t._v("章节。")]),t._v(" "),e("h2",{attrs:{id:"如何看待关注点分离"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何看待关注点分离"}},[t._v("#")]),t._v(" 如何看待关注点分离？")]),t._v(" "),e("p",[t._v("一些有着传统 Web 开发背景的用户可能会因为 SFC 将不同的关注点集合在一处而有所顾虑，觉得 HTML/CSS/JS 应当是分离开的！")]),t._v(" "),e("p",[t._v("要回答这个问题，我们必须对这一点达成共识："),e("strong",[t._v("前端开发的关注点不是完全基于文件类型分离的")]),t._v("。前端工程化的最终目的都是为了能够更好地维护代码。关注点分离不应该是教条式地将其视为文件类型的区别和分离，仅仅这样并不够帮我们在日益复杂的前端应用的背景下提高开发效率。")]),t._v(" "),e("p",[t._v("在现代的 UI 开发中，我们发现与其将代码库划分为三个巨大的层，相互交织在一起，不如将它们划分为松散耦合的组件，再按需组合起来。在一个组件中，其模板、逻辑和样式本就是有内在联系的、是耦合的，将它们放在一起，实际上使组件更有内聚性和可维护性。")]),t._v(" "),e("p",[t._v("即使你不喜欢单文件组件这样的形式而仍然选择拆分单独的 JavaScript 和 CSS 文件，也没关系，你还是可以通过"),e("a",{attrs:{href:"https://cn.vuejs.org/api/sfc-spec.html#src-imports",target:"_blank",rel:"noopener noreferrer"}},[t._v("资源导入"),e("OutboundLink")],1),t._v("功能获得热更新和预编译等功能的支持。")]),t._v(" "),e("h1",{attrs:{id:"三、api风格"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、api风格"}},[t._v("#")]),t._v(" 三、API风格")]),t._v(" "),e("h2",{attrs:{id:"选项式api-options-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选项式api-options-api"}},[t._v("#")]),t._v(" 选项式API（Options API）")]),t._v(" "),e("p",[t._v("使用选项式 API，我们可以用包含多个选项的对象来描述组件的逻辑，例如 "),e("code",[t._v("data")]),t._v("、"),e("code",[t._v("methods")]),t._v("和 "),e("code",[t._v("mounted")]),t._v("。选项所定义的属性都会暴露在函数内部的 "),e("code",[t._v("this")]),t._v(" 上，它会指向当前的组件实例.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<script>\nexport default {\n  // data() 返回的属性将会成为响应式的状态\n  // 并且暴露在 `this` 上\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // methods 是一些用来更改状态与触发更新的函数\n  // 它们可以在模板中作为事件监听器绑定\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // 生命周期钩子会在组件生命周期的各个不同阶段被调用\n  // 例如这个函数就会在组件挂载完成后被调用\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n<\/script>\n\n<template>\n  <button @click="increment">Count is: {{ count }}</button>\n</template>\n')])])]),e("h2",{attrs:{id:"组合式api-composition-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组合式api-composition-api"}},[t._v("#")]),t._v(" 组合式API(Composition API)")]),t._v(" "),e("p",[t._v("通过组合式API，我们可以看使用导入的API函数来描述组件逻辑， 在单文件组件中，组合式API通常会与"),e("code",[t._v("<script setup>")]),t._v(" 搭配使用。 这个"),e("code",[t._v("setup")]),t._v(" attribute是一个标识，告诉"),e("code",[t._v("Vue")]),t._v("需要在编译时进行一些处理，让我们可以更简洁地使用组合式API。比如"),e("code",[t._v("<script setup>")]),t._v(" 中的导入和顶层变量/函数都能狗在模版中直接使用。")]),t._v(" "),e("p",[t._v("下面是使用了组合式API与"),e("code",[t._v("<script setup>")]),t._v("改造后和上面的模版完全一样的组件：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<script setup>\nimport { ref, onMounted } from 'vue'\n\n// 响应式状态\nconst count = ref(0)\n\n// 用来修改状态、触发更新的函数\nfunction increment() {\n  count.value++\n}\n\n// 生命周期钩子\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n<\/script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n")])])]),e("h2",{attrs:{id:"应该选哪一个使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应该选哪一个使用"}},[t._v("#")]),t._v(" 应该选哪一个使用？")]),t._v(" "),e("p",[t._v("两种 API 风格都能够覆盖大部分的应用场景。它们只是同一个底层系统所提供的两套不同的接口。实际上，选项式 API 是在组合式 API 的基础上实现的！关于 Vue 的基础概念和知识在它们之间都是通用的。")]),t._v(" "),e("p",[e("strong",[t._v("选项式 API 以“组件实例”的概念为中心")]),t._v(" (即上述例子中的 this)，对于有面向对象语言背景的用户来说，这通常与基于类的心智模型更为一致。同时，它将响应性相关的细节抽象出来，并强制按照选项来组织代码，从而对初学者而言更为友好。")]),t._v(" "),e("p",[e("strong",[t._v("组合式 API 的核心思想是直接在函数作用域内定义响应式状态变量")]),t._v("，"),e("strong",[t._v("并将从多个函数中得到的状态组合起来处理复杂问题")]),t._v("。这种形式更加自由，也需要你对 Vue 的响应式系统有更深的理解才能高效使用。相应的，它的灵活性也使得组织和重用逻辑的模式变得更加强大。")]),t._v(" "),e("ul",[e("li",[t._v("在学习的过程中，推荐采用更易于自己理解的风格。再强调一下，大部分的核心概念在这两种风格之间都是通用的。熟悉了一种风格以后，你也能够很快地理解另一种风格。")]),t._v(" "),e("li",[t._v("在生产项目中：")])]),t._v(" "),e("ul",[e("li",[e("ul",[e("li",[t._v("当你不需要使用构建工具，或者打算主要在低复杂度的场景中使用 Vue，例如渐进增强的应用场景，推荐采用选项式 API。")]),t._v(" "),e("li",[t._v("当你打算用 Vue 构建完整的单页应用，推荐采用组合式 API + 单文件组件。")])])])])])}),[],!1,null,null,null);e.default=v.exports}}]);