(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{418:function(_,v,t){"use strict";t.r(v);var a=t(2),e=Object(a.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"一、题目"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、题目"}},[_._v("#")]),_._v(" 一、题目")]),_._v(" "),v("p",[_._v("给你一个整数数组 "),v("code",[_._v("citations")]),_._v(" ，其中 "),v("code",[_._v("citations[i]")]),_._v(" 表示研究者的第 "),v("code",[_._v("i")]),_._v("篇论文被引用的次数。计算并返回该研究者的"),v("code",[_._v("h")]),_._v("指数。")]),_._v(" "),v("p",[_._v("根据维基百科上"),v("code",[_._v("h指数的定义")]),_._v("："),v("code",[_._v("h")]),_._v(" 代表“高引用次数”，一名科研人员的 "),v("code",[_._v("h")]),_._v("指数是指他（她）的 （"),v("code",[_._v("n")]),_._v("篇论文中）总共有 "),v("code",[_._v("h")]),_._v(" 篇论文分别被引用了至少 "),v("code",[_._v("h")]),_._v("次。且其余的 "),v("code",[_._v("n - h")]),_._v("篇论文每篇被引用次数 不超过 "),v("code",[_._v("h")]),_._v(" 次。")]),_._v(" "),v("p",[_._v("如果 "),v("code",[_._v("h")]),_._v(" 有多种可能的值，"),v("code",[_._v("h")]),_._v(" 指数 是其中最大的那个。")]),_._v(" "),v("p",[_._v("示例 1：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("输入：citations = [3,0,6,1,5]\n输出：3 \n解释：给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 3, 0, 6, 1, 5 次。\n     由于研究者有 3 篇论文每篇 至少 被引用了 3 次，其余两篇论文每篇被引用 不多于 3 次，所以她的 h 指数是 3。\n")])])]),v("p",[_._v("示例 2：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("输入：citations = [1,3,1]\n输出：1\n")])])]),v("p",[_._v("提示：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("- n == citations.length\n- 1 <= n <= 5000\n- 0 <= citations[i] <= 1000\n")])])]),v("p",[_._v("来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/h-index")]),_._v(" "),v("h2",{attrs:{id:"二、分析解题思路"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、分析解题思路"}},[_._v("#")]),_._v(" 二、分析解题思路")]),_._v(" "),v("h3",{attrs:{id:"_2-1-思路一-排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-思路一-排序"}},[_._v("#")]),_._v(" 2.1 思路一:排序")]),_._v(" "),v("ul",[v("li",[_._v("首先看到"),v("code",[_._v("h")]),_._v("个元素大于等于某个值，"),v("code",[_._v("N-h")]),_._v("个元素小于等于某个值，这显然是一个有序序列的特征， 所以可以将数组先进行排序")]),_._v(" "),v("li",[_._v("将数组排序之后，对于给定的某个i，我们知道有"),v("code",[_._v("citations.length - i 篇论文的引用数 >= citaions[i]")]),_._v(","),v("code",[_._v("i篇论文的引用数 <= citations[i]")])]),_._v(" "),v("li",[_._v("如果让"),v("code",[_._v("h=citation.length-i")]),_._v(",即至少都有h篇论文分别被引用了至少"),v("code",[_._v("citation[i]")]),_._v("次，其余"),v("code",[_._v("citation.length-h")]),_._v("篇论文的引用数不多于"),v("code",[_._v("citation[i]")]),_._v("次。")]),_._v(" "),v("li",[_._v("最后，只要"),v("code",[_._v("citation[i]>=h")]),_._v("，就满足本题了")])]),_._v(" "),v("h2",{attrs:{id:"三、js代码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、js代码"}},[_._v("#")]),_._v(" 三、JS代码")]),_._v(" "),v("h3",{attrs:{id:"_3-1-思路一之排序代码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-思路一之排序代码"}},[_._v("#")]),_._v(" 3.1 思路一之排序代码：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v(" var hIndex = function(citations) {\n    citations.sort((a,b) => a-b)\n    for(let i=0; i<citations.length; i++){\n        let h = citations.length - i;\n        if(h <= citations[i]){\n            return h;\n        }\n    }\n    return 0;\n};\n\nlet arr = [1,3,1]\nlet result = hIndex(arr);\nconsole.log(result) \n// 1\narr = [3,0,6,1,5]\nresult = hIndex(arr);\nconsole.log(result) \n// 3\n\n")])])]),v("h4",{attrs:{id:"复杂度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#复杂度"}},[_._v("#")]),_._v(" 复杂度：")]),_._v(" "),v("p",[_._v("时间复杂度：O(n)\n空间复杂度：O(n)")]),_._v(" "),v("h2",{attrs:{id:"四、总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四、总结"}},[_._v("#")]),_._v(" 四、总结")]),_._v(" "),v("h3",{attrs:{id:"_4-1-回顾下复杂度如何计算"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-回顾下复杂度如何计算"}},[_._v("#")]),_._v(" 4.1 回顾下复杂度如何计算")]),_._v(" "),v("h4",{attrs:{id:"_4-1-1时间复杂度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1时间复杂度"}},[_._v("#")]),_._v(" 4.1.1时间复杂度")]),_._v(" "),v("h5",{attrs:{id:"_4-1-1-1-概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-1-概念"}},[_._v("#")]),_._v(" 4.1.1.1 概念")]),_._v(" "),v("p",[_._v("时间复杂度是执行算法的时间成本，空间复杂度是执行算法的空间成本")]),_._v(" "),v("h5",{attrs:{id:"_4-1-1-2-算法的好与坏"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-2-算法的好与坏"}},[_._v("#")]),_._v(" 4.1.1.2 算法的好与坏")]),_._v(" "),v("p",[_._v("坏的：1、运行时间长； 2、占用空间大")]),_._v(" "),v("p",[_._v("运行时间的长短和占用内存空间的大小，是衡量程序好坏的重要因素")]),_._v(" "),v("p",[_._v("代码绝对执行时间是无法预估的，但是可以预估代码的基本操作执行次数")]),_._v(" "),v("h5",{attrs:{id:"_4-1-1-3-基本操作执行次数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-3-基本操作执行次数"}},[_._v("#")]),_._v(" 4.1.1.3 基本操作执行次数")]),_._v(" "),v("p",[v("code",[_._v("T(n)")]),_._v(": 程序基本操作执行次数的函数【程序的相对执行时间函数】，"),v("code",[_._v("n")]),_._v("：输入规模")]),_._v(" "),v("p",[_._v("案列：")]),_._v(" "),v("blockquote",[v("p",[_._v("场景一： T(n) = 3n， 执行次数是线性的")]),_._v(" "),v("p",[_._v("场景一： T(n) = 5logn， 执行次数是用对数计算的")]),_._v(" "),v("p",[_._v("场景三： T(n) = 2，执行次数是常量")]),_._v(" "),v("p",[_._v("场景四： T(n) = 0.5n^2 + 0.5n,执行次数是用多项式计算的")])]),_._v(" "),v("h5",{attrs:{id:"_4-1-1-4-渐进时间复杂度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-4-渐进时间复杂度"}},[_._v("#")]),_._v(" 4.1.1.4 渐进时间复杂度")]),_._v(" "),v("p",[_._v("概念：")]),_._v(" "),v("ul",[v("li",[_._v("若存在函数"),v("code",[_._v("f(n)")]),_._v(",使得当"),v("code",[_._v("n")]),_._v("趋近于无穷大时，"),v("code",[_._v("T(n)/f(n)")]),_._v("的极限值为不等于零的常数，则称"),v("code",[_._v("f(n)")]),_._v("是"),v("code",[_._v("T(n)")]),_._v("的同数量级函数。")]),_._v(" "),v("li",[_._v("记作 "),v("code",[_._v("T(n) = O(f(n))")]),_._v(",称为 "),v("code",[_._v("O(f(n))")]),_._v("，"),v("code",[_._v("O")]),_._v("为算法的渐进时间复杂度，简称为时间复杂度")]),_._v(" "),v("li",[_._v("因为渐进时间复杂度用大写"),v("code",[_._v("O")]),_._v("来表示， 所以也称为"),v("code",[_._v("大O表示法")])])]),_._v(" "),v("p",[_._v("如何推导时间复杂度(推导原则):")]),_._v(" "),v("ul",[v("li",[_._v("1、如果运行时间是常数量级，则用常数1表示")]),_._v(" "),v("li",[_._v("2、只保留时间函数中的最高阶项")]),_._v(" "),v("li",[_._v("3、如果最高阶项存在，则省去最高阶项前面的系数")])]),_._v(" "),v("p",[_._v("场景：")]),_._v(" "),v("blockquote",[v("p",[_._v("一： "),v("code",[_._v("T(n) = 3n")]),_._v("，最高阶项为"),v("code",[_._v("3n")]),_._v("，省去系数"),v("code",[_._v("3")]),_._v("，则转化的时间复杂度：  "),v("code",[_._v("T(n)=O(n)")])]),_._v(" "),v("p",[_._v("二： "),v("code",[_._v("T(n) = 5logn")]),_._v(",最高阶项为 5logn，省去系数，转化的时间复杂度为： "),v("code",[_._v("T(n) = O(logn)")])]),_._v(" "),v("p",[_._v("三： "),v("code",[_._v("T(n) =2")]),_._v(" ,只有常数量级，则转化的时间复杂度为："),v("code",[_._v("T(n)=O(1)")])]),_._v(" "),v("p",[_._v("四： "),v("code",[_._v("T(n)=0.5n^2 + 0.5n")]),_._v(",最高阶项目为 0.5 n^2 ,则转化的时间复杂度为： "),v("code",[_._v("T(n)=O(n^2)")])]),_._v(" "),v("p",[_._v("以上四种复杂度究竟谁的程度执行用时更长，谁更节省时间？ 当n的取值足够大时，可以得出："),v("code",[_._v("O(1)<O(logn)<O(n)<O(n^2)")])])]),_._v(" "),v("h5",{attrs:{id:"_4-1-1-5-其他形式的时间复杂度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-5-其他形式的时间复杂度"}},[_._v("#")]),_._v(" 4.1.1.5 其他形式的时间复杂度：")]),_._v(" "),v("p",[v("code",[_._v("O(nlogn)")]),_._v("、"),v("code",[_._v("O(n^3)")]),_._v("、"),v("code",[_._v("O(mn)")]),_._v("、"),v("code",[_._v("O(2^n)")]),_._v("、"),v("code",[_._v("O(n!)")])]),_._v(" "),v("h5",{attrs:{id:"_4-1-1-6-时间复杂度的巨大差异"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-6-时间复杂度的巨大差异"}},[_._v("#")]),_._v(" 4.1.1.6 时间复杂度的巨大差异")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18a7b8bf6f8c4ce39bba54f4971cdf43~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),_._v(" "),v("p",[_._v("从上面的表格可以看出，当n的值很小的时候， 算法A的运行用时要远大于算法B；\n当n的值在1000左右时，算法A和算法B的运行时间已经比较接近；\n随着n的值越来越大，甚至达到十万、百万时，算法A的优势开始显现出来，算法B的运行速度则越来越慢，差距越来越明显。")]),_._v(" "),v("h4",{attrs:{id:"_4-1-2-空间复杂度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-空间复杂度"}},[_._v("#")]),_._v(" 4.1.2 空间复杂度")]),_._v(" "),v("h5",{attrs:{id:"_4-1-2-1概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-1概念"}},[_._v("#")]),_._v(" 4.1.2.1概念")]),_._v(" "),v("ul",[v("li",[_._v("概念：时间复杂度是执行算法的时间成本， 空间复杂度是执行算法的空间成本")]),_._v(" "),v("li",[_._v("内存空间是有限的， 在时间复杂度相同的情况下， 算法占用的内存空间自然是越小越好")]),_._v(" "),v("li",[_._v("空间复杂度是对一个算法在运行过程中临时占用存储空间大小对量度，它同样使用了大O表示法")]),_._v(" "),v("li",[_._v("程序占用空间大小的计算公式记作： S(n) = O(f(n)), 其中n为问题的规模， f(n) 为算法所占存储空间的函数")])]),_._v(" "),v("h5",{attrs:{id:"_4-1-2-2-空间复杂度的计算"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-2-空间复杂度的计算"}},[_._v("#")]),_._v(" 4.1.2.2 空间复杂度的计算")]),_._v(" "),v("p",[_._v("1、常量空间 "),v("code",[_._v("O(1)")])]),_._v(" "),v("p",[_._v("当算法的存储空间大小固定，和输入规模没有直接的关系时，空间复杂度为："),v("code",[_._v("O(1)")])]),_._v(" "),v("p",[_._v("2、线性空间")]),_._v(" "),v("p",[_._v("当算法分配的空间是一个线性的集合（如数组），并且集合大小和输入规模n成正比时，空间复杂度记作："),v("code",[_._v("O(n)")])]),_._v(" "),v("p",[_._v("3、二维空间")]),_._v(" "),v("p",[_._v("当算法分配的空间是一个二维数组集合，并且集合的长度和宽度都与输入规模n成正比时，空间复杂度记作："),v("code",[_._v("O(n^2)")])]),_._v(" "),v("p",[_._v("4、递归空间")]),_._v(" "),v("p",[_._v("递归场景比较特殊，虽然代码中并无显示地声明变量或集合，但是计算机在执行程序时，会专门分配一块内存，用来存储“方法调用栈”")]),_._v(" "),v("p",[_._v("方法调用栈")]),_._v(" "),v("ul",[v("li",[_._v("进栈:一个新方法执行入栈操作，把调用的方法和参数信息压入栈中")]),_._v(" "),v("li",[_._v("出栈:当方法返回时，执行出栈操作， 把调用的方法和参数信息从栈中弹出")])]),_._v(" "),v("p",[_._v("执行递归所需要的空间复杂度:"),v("code",[_._v("O(n)")]),_._v(":")]),_._v(" "),v("ul",[v("li",[_._v("执行递归操作所需要的内存空间和递归的深度成正比。")]),_._v(" "),v("li",[_._v("纯粹的递归操作的空间复杂度也是线性的，如果递归的深度是n，那么空间复杂度就是O(n)")])]),_._v(" "),v("h5",{attrs:{id:"_4-1-2-3-时间和空间的取舍"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-3-时间和空间的取舍"}},[_._v("#")]),_._v(" 4.1.2.3 时间和空间的取舍")]),_._v(" "),v("ul",[v("li",[_._v("评估算法的时间和空间复杂度，根本原因是因为计算机的运算速度和空间资源是有限的")]),_._v(" "),v("li",[_._v("绝大多数时候， 时间复杂度更为重要一些， 所以宁可多分配一些内存空间，也要提升程序的执行速度。")]),_._v(" "),v("li",[_._v("空间复杂度离不开数据结构。【散列表、数组、二维数组】")])])])}),[],!1,null,null,null);v.default=e.exports}}]);