(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{420:function(s,t,n){"use strict";n.r(t);var a=n(2),e=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"一、题目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、题目"}},[s._v("#")]),s._v(" 一、题目")]),s._v(" "),t("ol",{attrs:{start:"41"}},[t("li",[s._v("缺失的第一个正数\n给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数。")])]),s._v(" "),t("p",[s._v("请你实现时间复杂度为 O(n) 并且只使用常数级别额外空间的解决方案。")]),s._v(" "),t("p",[s._v("示例 1：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("输入：nums = [1,2,0]\n输出：3\n")])])]),t("p",[s._v("示例 2：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("输入：nums = [3,4,-1,1]\n输出：2\n")])])]),t("p",[s._v("示例 3：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("输入：nums = [7,8,9,11,12]\n输出：1\n")])])]),t("p",[s._v("提示：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1 <= nums.length <= 5 * 105\n-231 <= nums[i] <= 231 - 1\n")])])]),t("p",[s._v("来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/first-missing-positive")]),s._v(" "),t("h2",{attrs:{id:"二、分析解题思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、分析解题思路"}},[s._v("#")]),s._v(" 二、分析解题思路")]),s._v(" "),t("h3",{attrs:{id:"思路一-两次遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思路一-两次遍历"}},[s._v("#")]),s._v(" 思路一：两次遍历")]),s._v(" "),t("p",[s._v("初始数据处理：判断nums[i] 是否是正整数，其次判断nums[i]是否小于nums.length")]),s._v(" "),t("ol",[t("li",[s._v("将原数组进行位移，使nums[i]尽量存放数字i+1")]),s._v(" "),t("li",[s._v("遍历移位后的数组，查找位置与值不对应的最小的正整数")])]),s._v(" "),t("h3",{attrs:{id:"思路二-javascript的includes-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思路二-javascript的includes-方法"}},[s._v("#")]),s._v(" 思路二：JavaScript的includes()方法")]),s._v(" "),t("ul",[t("li",[s._v("找出数组中缺失的第一个正数\n"),t("ul",[t("li",[s._v("从1～nums.length开始寻找， 最多nums.length次数")]),s._v(" "),t("li",[s._v("直接用原数组的下标开始查询")])])]),s._v(" "),t("li",[s._v("includes()方法 判断一个数组中是否包含一个指定的值，如果存在则返回true,否则返回false。如果不存在的话，那结果就是i")]),s._v(" "),t("li",[s._v("如果1～nums.length都出现，那结果就是nums.length+1")])]),s._v(" "),t("h2",{attrs:{id:"三、js代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、js代码"}},[s._v("#")]),s._v(" 三、JS代码")]),s._v(" "),t("h3",{attrs:{id:"_3-1-两次遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-两次遍历"}},[s._v("#")]),s._v(" 3.1 两次遍历")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v(" var firstMissingPositive = function(nums) {\n    for(let i =0; i<nums.length; i++){\n        while(nums[i]>0 && nums[i] <=nums.length && nums[i]!==nums[nums[i]-1]){\n            let temp = nums[nums[i]-1];\n            nums[nums[i]-1] = nums[i];\n            nums[i] = temp;\n        }\n    }\n    for(let i=0; i<nums.length; i++){\n        if(nums[i]!=i+1){\n            return i+1;\n        }\n    }\n    return nums.length + 1\n};\n")])])]),t("h3",{attrs:{id:"_3-2-javascript中的includes-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-javascript中的includes-方法"}},[s._v("#")]),s._v(" 3.2 JavaScript中的includes()方法")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("var firstMissingPositive = function(nums) {\n    for(let i=1;i<=nums.length;i++){\n        if(!nums.includes(i)){\n            return i\n        }\n    }\n    return nums.length +1\n}\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);