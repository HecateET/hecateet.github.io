(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{433:function(_,e,v){"use strict";v.r(e);var a=v(2),t=Object(a.a)({},(function(){var _=this,e=_._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h1",{attrs:{id:"一、前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[_._v("#")]),_._v(" 一、前言")]),_._v(" "),e("blockquote",[e("p",[_._v("day03 框架设计的核心要素包括有哪些呢？如果让我们自己去设计一个框架程序， 我们需要考虑的点有哪些？《Vue.js设计与实现》第2章 框架设计的核心要素这一章可以给你一些答案。")])]),_._v(" "),e("p",[_._v("框架设计需要考虑的点例如：")]),_._v(" "),e("ul",[e("li",[_._v("我们的框架应该给用户提供哪些构建产物？")]),_._v(" "),e("li",[_._v("产物的模块格式如何？")]),_._v(" "),e("li",[_._v("当用户没有以预期的方式使用框架时，是否应该打印合适的警告信息从而提供更好的开发体验，让用户快速定位问题？")]),_._v(" "),e("li",[_._v("开发版本的构建和生产版本的构建有何区别？")]),_._v(" "),e("li",[_._v("热更新需要框架层面的支持，我们是否也应该考虑？")]),_._v(" "),e("li",[_._v("当你的框架提供了多个功能，而用户只需要其中几个功能的时，用户能否选择关闭其他功能从而减少最终资源的打包体积？")])]),_._v(" "),e("p",[_._v("以上问题，都是我们在设计框架的过程中应该考虑的。")]),_._v(" "),e("h1",{attrs:{id:"二、本章内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、本章内容"}},[_._v("#")]),_._v(" 二、本章内容")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35b4ab08e3614515a30452df00217b9d~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),_._v(" "),e("h2",{attrs:{id:"_2-1-提升用户的开发体验"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-提升用户的开发体验"}},[_._v("#")]),_._v(" 2.1 提升用户的开发体验")]),_._v(" "),e("h3",{attrs:{id:"_1、提供友好的警告信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、提供友好的警告信息"}},[_._v("#")]),_._v(" 1、提供友好的警告信息")]),_._v(" "),e("p",[_._v("在框架设计和开发过程中，提供友好的警告信息至关重要。如果这一点都做得不好，那么很可能会经常收到用户的抱怨。始终提供友好的警告信息不仅能够帮助用户快速定位问题，节省用户的时间， 还能够让框架收获良好的口碑， 让用户认可框架的专业性。")]),_._v(" "),e("h3",{attrs:{id:"_2、直观的输出内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、直观的输出内容"}},[_._v("#")]),_._v(" 2、直观的输出内容")]),_._v(" "),e("p",[_._v("举个例子，在Vue.js3中，当我们在控制台打印一个ref数据时：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("const count = ref(0)\nconsole.log(count)\n")])])]),e("p",[_._v("打开控制台查看输出，结果是：")]),_._v(" "),e("p",[_._v("让输出的信息更友好， 可以自定义浏览器的"),e("code",[_._v("formatter")]),_._v(" ,从而自定义输出形式。")]),_._v(" "),e("h2",{attrs:{id:"_2-2-控制框架代码的体积"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-控制框架代码的体积"}},[_._v("#")]),_._v(" 2.2 控制框架代码的体积")]),_._v(" "),e("p",[_._v("框架的大小也是衡量框架的标准之一。在实现同样的功能的情况下， 自然是用代码越少越好， 这样体积就会越小，最后浏览器加载资源的时间也就越少。")]),_._v(" "),e("p",[_._v("联想一下， 提供越完善的警告信息就意味着要编写更多的代码，这不是与控制代码体积相悖吗？那么想办法如何解决这个问题。")]),_._v(" "),e("p",[e("code",[_._v("Vue.js3")]),_._v(" 源码，可以发现每一个"),e("code",[_._v("warn")]),_._v("函数的调用都会配合 "),e("code",[_._v("__DEV__")]),_._v("常量的检查，例如：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v('if(__DEV__ && !res){\n  warn(`Faild to mount app:mount target selector "${container}" returned null`)\n}\n')])])]),e("p",[_._v("在开发环境中， "),e("code",[_._v("__DEV__")]),_._v("为"),e("code",[_._v("true")]),_._v(" ，上面的warn代码是一定会存在的；而当用于生产环境的资源时，会把"),e("code",[_._v("__DEV__")]),_._v("常量设置为 "),e("code",[_._v("false")]),_._v(",这时上面"),e("code",[_._v("warn")]),_._v("分支代码将永远不会执行。")]),_._v(" "),e("p",[_._v("因为判断条件始终为假，这段永远不会执行的代码称为"),e("code",[_._v("dead code")]),_._v(",它不会出现在最终产物中， 在构建资源的时候就会被移除，因此在"),e("code",[_._v("vue.global.prod.js")]),_._v("中是不会存在这段代码的。")]),_._v(" "),e("p",[_._v("以上就能做到， "),e("strong",[_._v("在开发环境中为用户提供友好的警告信息的同时，不会增加生产环境代码的体积。")])]),_._v(" "),e("h2",{attrs:{id:"_2-3-框架要做到良好的tree-shaking"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-框架要做到良好的tree-shaking"}},[_._v("#")]),_._v(" 2.3 框架要做到良好的Tree-Shaking")]),_._v(" "),e("p",[e("strong",[_._v("思考")]),_._v("：Vue内建了很多组件,例如："),e("code",[_._v("<Transition>")]),_._v("组件，如果我们的项目中根本就没有用到该组件， 那么它的代码需要包含在项目最终的构建资源中吗？")]),_._v(" "),e("p",[e("strong",[_._v("答案")]),_._v("：“当然不需要”，")]),_._v(" "),e("p",[_._v("那么如何做到以上功能点，那就要讲到"),e("code",[_._v("Tree-Shaking")])]),_._v(" "),e("h3",{attrs:{id:"_1、什么是tree-shaking"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是tree-shaking"}},[_._v("#")]),_._v(" 1、什么是Tree-Shaking？")]),_._v(" "),e("p",[_._v("在前端领域，这个概念因"),e("code",[_._v("rollup.js")]),_._v("而普及。 简单的说，"),e("code",[_._v("Tree-Shaking")]),_._v(" 指的就是消除那些永远不会被执行的代码，也就是排除"),e("code",[_._v("dead code")]),_._v("，现在无论是"),e("code",[_._v("rollup.js")]),_._v("还是"),e("code",[_._v("webpack")]),_._v("，都支持"),e("code",[_._v("Tree-Shaking")]),_._v("。")]),_._v(" "),e("h3",{attrs:{id:"_2、如何实现tree-shaking"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、如何实现tree-shaking"}},[_._v("#")]),_._v(" 2、如何实现Tree-Shaking?")]),_._v(" "),e("p",[_._v("想要实现"),e("code",[_._v("Tree-Shaking")]),_._v("，必须要满足一个条件，即模块必须是"),e("code",[_._v("ESM")]),_._v("（ES Module），因为"),e("code",[_._v("Tree-Shaking")]),_._v("依赖"),e("code",[_._v("ESM")]),_._v("的静态结构。")]),_._v(" "),e("p",[_._v("以"),e("code",[_._v("rollup.js")]),_._v("举例子看看"),e("code",[_._v("Tree-Shaking")]),_._v(" 是如何工作的，其中目录结构为：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("｜—— demo\n｜\t —— package.json\n｜\t —— input.js\n｜\t —— utils.js\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("yarn add rollup -D\n\n#or npm install rollup -D\n")])])]),e("p",[e("code",[_._v("input.js")]),_._v("和"),e("code",[_._v("utils.js")]),_._v("文件的内容；")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("//input.js\nimport {foo} from './utils.js'\nfoo()\n\n//utils.js\nexport function foo(obj){\n  obj&& obj.foo\n}\n\nexport function bar(obj){\n  obj&& obj.bar\n}\n")])])]),e("p",[_._v("上述代码很简单，在"),e("code",[_._v("utils.js")]),_._v(" 文件中定义并到处了两个函数， 分别是"),e("code",[_._v("foo")]),_._v("函数和"),e("code",[_._v("bar")]),_._v("函数，然后在"),e("code",[_._v("input.js")]),_._v("中倒入了"),e("code",[_._v("foo")]),_._v("函数并执行。注意，我们并没有倒入"),e("code",[_._v("bar")]),_._v("函数。")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("npm rollup input.js -f esm -o bundle.js\n")])])]),e("p",[_._v("以"),e("code",[_._v("input.js")]),_._v("文件为入口， 输出"),e("code",[_._v("ESM")]),_._v("，输出的文件叫"),e("code",[_._v("bundle.js")]),_._v("。命令执行成功后，我们打开"),e("code",[_._v("bundle.js")]),_._v("来查看一下他的内容：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("//bundle.js\nfunction foo(obj){\n  obj&& obj.foo\n}\n\nfoo();\n")])])]),e("p",[_._v("可以看到，其中并不包含"),e("code",[_._v("bar")]),_._v("函数， 这说明"),e("code",[_._v("Tree-Shaking")]),_._v("起作用了。 由于我们并没有使用"),e("code",[_._v("bar")]),_._v("函数，因此它作为"),e("code",[_._v("dead code")]),_._v("被删除了。")]),_._v(" "),e("p",[_._v("但是仔细观察会发现， "),e("code",[_._v("foo")]),_._v("函数的执行也没有什么意义，仅仅是读取了对象的值，所以它的执行似乎没有什么必要。既然这段代码删了也不会对我们的应用程序产生影响，那么为什么"),e("code",[_._v("rollup.js")]),_._v("不把这段代码也作为"),e("code",[_._v("dead code")]),_._v("移除呢？")]),_._v(" "),e("h3",{attrs:{id:"_3、tree-shaking中的第二个关键点-副作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、tree-shaking中的第二个关键点-副作用"}},[_._v("#")]),_._v(" 3、Tree- Shaking中的第二个关键点-副作用")]),_._v(" "),e("p",[_._v("如果一个函数调用会产生副作用， 那么就不能将其移出。")]),_._v(" "),e("p",[_._v("什么是副作用？简单地说，副作用就是，当调用函数的时候会对外部产生影响，例如修改了全局变量。")]),_._v(" "),e("p",[_._v("解释，也许你会说上面的代码明显是读取对象的值，怎么会产生副作用呢？其实也是有可能的，试想一下：")]),_._v(" "),e("ul",[e("li",[_._v("如果"),e("code",[_._v("obj")]),_._v("对象是一个通过"),e("code",[_._v("Proxy")]),_._v("创建的代理对象。")]),_._v(" "),e("li",[_._v("那么当我们读取对象属性时，就会触发代理对象的"),e("code",[_._v("get")]),_._v("夹子（"),e("code",[_._v("trap")]),_._v("），在"),e("code",[_._v("get")]),_._v("夹子中是可能产生副作用的。")]),_._v(" "),e("li",[_._v("例如：我们在"),e("code",[_._v("get")]),_._v("夹子中修改了某个全局变了。")])]),_._v(" "),e("p",[_._v("至于到底会不会产生副作用，只有代码真正运行的时候才能知道，"),e("code",[_._v("JavaScript")]),_._v("本身是动态语言，因此想要静态地分析哪些代码是"),e("code",[_._v("dead code")]),_._v("很有安度，上面只是举了一个简单的例子。")]),_._v(" "),e("h3",{attrs:{id:"_4、-pure-注释代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、-pure-注释代码"}},[_._v("#")]),_._v(" 4、"),e("code",[_._v("/*#__PURE__*/")]),_._v(" 注释代码")]),_._v(" "),e("p",[_._v("因为静态地分析"),e("code",[_._v("JavaScript")]),_._v("代码很困难， 所以像"),e("code",[_._v("rollup.js")]),_._v("这类工具都会提供一个机制，让我们明确地告诉"),e("code",[_._v("roullup.js")]),_._v(':"放心吧，这段代码不会产生副作用，你可以移除它。"，具体如何做？')]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("import {foo} from './utils'\n/*#__PURE__*/ foo()\n")])])]),e("p",[_._v("注释代码"),e("code",[_._v("/*#__PURE__*/")]),_._v("，作用就是告诉"),e("code",[_._v("rollup.js")]),_._v("，对于"),e("code",[_._v("foo")]),_._v("函数地调用不会产生副作用，你可以放心地对其进行"),e("code",[_._v("Tree-Shaking")]),_._v(",此时再次执行构建命令并查看"),e("code",[_._v("bundle.js")]),_._v("文件，就会发现它的内容是空的，这就说明"),e("code",[_._v("Tree-Shaking")]),_._v("生效了。")]),_._v(" "),e("p",[_._v("在编写框架的时候需要合理的使用"),e("code",[_._v("/*#__PURE__*/")]),_._v("注释。如果你去搜索"),e("code",[_._v("Vue.js3")]),_._v(" 的源码，会发现它大量使用了该注释，例如：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("export const isHTMLTag = /*#__PURE__*/ makeMap(HTML_TAGS)\n")])])]),e("p",[_._v("这对编写代码是否会造成很大的心智负担？")]),_._v(" "),e("ul",[e("li",[_._v("不会，因为通常生产副作用的代码都是模块内函数的顶级调用。")]),_._v(" "),e("li",[_._v("对于顶级调用来说，是可能产生副作用的；")]),_._v(" "),e("li",[_._v("但对于函数内调用来说， 只要函数"),e("code",[_._v("bar")]),_._v("没有被调用， 那么"),e("code",[_._v("foo")]),_._v("函数对调用自然不会产生副作用。")])]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("foo() //顶级调用\n\nfunction bar(){\n  foo()//函数内调用\n  \n}\n")])])]),e("p",[_._v("因此在"),e("code",[_._v("Vue.js3")]),_._v(" 的源码中， 基本都是在一些顶级调用的函数上使用"),e("code",[_._v("/*#__PURE__*/")]),_._v("注释。")]),_._v(" "),e("p",[_._v("它可以应用在任何语句上。 该注释可以被"),e("code",[_._v("rollup.js")]),_._v("和"),e("code",[_._v("webpack")]),_._v("以及压缩工具（如"),e("code",[_._v("terser")]),_._v("）识别。")]),_._v(" "),e("h2",{attrs:{id:"_2-4-框架应该输出怎样的构建产物"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-框架应该输出怎样的构建产物"}},[_._v("#")]),_._v(" 2.4 框架应该输出怎样的构建产物")]),_._v(" "),e("p",[_._v("上文提到Vue.js会为开发环境和生产环境输出不同的包，例如:")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("vue.global.js")]),_._v("用于开发环境，它包含必要的警告信息")]),_._v(" "),e("li",[e("code",[_._v("vue.global.prod.js")]),_._v("用于生产环境，不包含警告信息。")])]),_._v(" "),e("p",[_._v("实际上，"),e("code",[_._v("Vue.js")]),_._v("的构建产物处理有环境上的区分之外， 还会根据使用场景的不同而输出其他形式的产物。")]),_._v(" "),e("p",[_._v("我们将讨论这些产物的用途以及在构建阶段如何输出这些产物。")]),_._v(" "),e("h3",{attrs:{id:"_1、需求背景一-在html页面中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、需求背景一-在html页面中"}},[_._v("#")]),_._v(" 1、需求背景一：在HTML页面中")]),_._v(" "),e("p",[_._v("用户可以直接在HTML页面中使用"),e("code",[_._v("<script>")]),_._v("标签引入框架并使用")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v('<body>\n  <script src="/path/to/vue.js"><\/script>  \n  <script>\n    const {createApp} = Vue\n    //...\n  <\/script>  \n</body>\n')])])]),e("p",[_._v("为了实现这个需求， 我们需要输出一种叫做IIFE格式的资源。"),e("code",[_._v("IIFE")]),_._v("的全称是"),e("code",[_._v("Immediately Invoked Function Expression")]),_._v("，即“立即调用的函数表达式”，易于用"),e("code",[_._v("JavaScript")]),_._v("来表达：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("(function(){\n  //...\n})()\n")])])]),e("p",[_._v("如上所示，这是一个立即执行的函数表达式。实际上，"),e("code",[_._v("vue.global.js")]),_._v("的文件就是"),e("code",[_._v("IIFE")]),_._v("形式的资源，它的代码结构如下所示：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("var Vue = (function(exports){\n  //...\n  exports.createApp = createApp;\n  //...\n  return exports\n}({}))\n")])])]),e("p",[_._v("这样当我们使用"),e("code",[_._v("<script>")]),_._v(" 标签直接引入"),e("code",[_._v("vue.global.js")]),_._v("文件后， 全局变量"),e("code",[_._v("Vue")]),_._v("就是可用的了。")]),_._v(" "),e("p",[_._v("在"),e("code",[_._v("rullup.js")]),_._v("中，可以通过配置"),e("code",[_._v("format：'iife'")]),_._v("来输出这种形式的资源：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("const config = {\n  input:'input.js',\n  output:{\n    file:'output.js',\n    format:'iife' //指定模块形式\n  }\n}\n\nexport default config\n")])])]),e("h3",{attrs:{id:"_2、需求背景二-直接引入esm格式的资源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、需求背景二-直接引入esm格式的资源"}},[_._v("#")]),_._v(" 2、需求背景二：直接引入ESM格式的资源")]),_._v(" "),e("p",[_._v("随着技术的发展和浏览器的支持，现在主流浏览器对原生ESM的支持都很不错， 所以用户除了能够使用"),e("code",[_._v("<script>")]),_._v("标签引用"),e("code",[_._v("IIFE")]),_._v("格式的资源外，还可以直接引入"),e("code",[_._v("ESM")]),_._v("格式的资源。")]),_._v(" "),e("p",[_._v("例如："),e("code",[_._v("Vue.js3")]),_._v("还会输出"),e("code",[_._v("vue.esm.browser.js")]),_._v("文件，用户可以直接调用"),e("code",[_._v('<script type="module">')]),_._v("标签引入：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v('<script type="module" src="/path/to/vue.esm-browser.js"><\/script>\n')])])]),e("p",[_._v("为了输出"),e("code",[_._v("ESM")]),_._v("格式的资源，"),e("code",[_._v("rollup.js")]),_._v("的输出格式需要配置为："),e("code",[_._v("format:'esm'")]),_._v("。")]),_._v(" "),e("p",[_._v("为什么"),e("code",[_._v("vue.esm-browser.js")]),_._v("文件中会有"),e("code",[_._v("-browser")]),_._v("字样？其实对于"),e("code",[_._v("ESM")]),_._v("格式的资源来说， ·Vue.js·还会输出一个"),e("code",[_._v("vue.esm-bundler.js")]),_._v("文件。")]),_._v(" "),e("p",[_._v("为什么其中的"),e("code",[_._v("-browser")]),_._v("变成了"),e("code",[_._v("-bundler")]),_._v("呢？")]),_._v(" "),e("ul",[e("li",[_._v("无论"),e("code",[_._v("rollup.js")]),_._v("还是"),e("code",[_._v("webpack")]),_._v("，在寻找资源时，如果"),e("code",[_._v("package.json")]),_._v("中存在"),e("code",[_._v("module")]),_._v("字段， 那么会优先使用"),e("code",[_._v("module")]),_._v("字段指向的资源来代替"),e("code",[_._v("main")]),_._v("字段指向的资源。")])]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v('{\n  "main":"index.js",\n  "module":dist/vue.runtime.esm-bundler.js"\n}\n')])])]),e("p",[_._v("其中"),e("code",[_._v("module")]),_._v("字段指向的是"),e("code",[_._v("vue.runtime.esm-bundler.js")]),_._v("文件：")]),_._v(" "),e("ul",[e("li",[_._v("如果项目使用"),e("code",[_._v("webpack")]),_._v("构建的，那么你是用的"),e("code",[_._v("Vue.js")]),_._v("资源就是"),e("code",[_._v("vue.runtime.esm-bundler.js")])]),_._v(" "),e("li",[_._v("带有"),e("code",[_._v("-bundler")]),_._v("字样的"),e("code",[_._v("ESM")]),_._v("资源是给"),e("code",[_._v("rollup.js")]),_._v("或"),e("code",[_._v("webpack")]),_._v("等打包工具使用等。")]),_._v(" "),e("li",[_._v("带有"),e("code",[_._v("-browser")]),_._v("字样的"),e("code",[_._v("ESM")]),_._v("资源是给"),e("code",[_._v('<script type="module"')]),_._v("使用的。")])]),_._v(" "),e("p",[e("code",[_._v("-bundler")]),_._v(" "),e("strong",[_._v("和")]),e("code",[_._v("-browser")]),e("strong",[_._v("两者有何区别？看")]),e("code",[_._v("__DEV__")]),_._v("常量。")]),_._v(" "),e("ul",[e("li",[_._v("当构建用于"),e("code",[_._v("<script>")]),_._v(" 标签的"),e("code",[_._v("ESM")]),_._v("资源时")])]),_._v(" "),e("ul",[e("li",[e("ul",[e("li",[_._v("开发环境："),e("code",[_._v("__DEV__")]),_._v("会被设置为"),e("code",[_._v("true")])]),_._v(" "),e("li",[_._v("生产环境："),e("code",[_._v("__DEV__")]),_._v("会被设置为"),e("code",[_._v("false")]),_._v("，从而被"),e("code",[_._v("Tree-Shaking")]),_._v("移除")])])])]),_._v(" "),e("ul",[e("li",[_._v("当构建提供给打包工具的"),e("code",[_._v("ESM")]),_._v("格式的资源时")])]),_._v(" "),e("ul",[e("li",[e("ul",[e("li",[_._v("不能直接把"),e("code",[_._v("__DEV__")]),_._v("设置为"),e("code",[_._v("true")]),_._v("或"),e("code",[_._v("false")])]),_._v(" "),e("li",[_._v("而是要使用"),e("code",[_._v("(process.env.NODE_ENV !== 'production')")]),_._v(" 替换"),e("code",[_._v("__DEV__")]),_._v("常量。")])])])]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("if(__DEV__){\n  warn(`useCssModule() is not supported in the global build`)\n}\n")])])]),e("p",[_._v("带有"),e("code",[_._v("-bundler")]),_._v("字样的资源中会变成：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("if((process.env.NODE_ENV !=='production')){\n   warn(`useCssModule() is not supported in the global build`)\n}\n")])])]),e("p",[_._v("这样做的好处是：用户可以通过"),e("code",[_._v("webpack")]),_._v("配置自行决定构建资源的目标环境，但是最终效果其实一样，这段代码也只会出现在开发环境中。")]),_._v(" "),e("h3",{attrs:{id:"_3、需求背景三-用于服务端渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、需求背景三-用于服务端渲染"}},[_._v("#")]),_._v(" 3、需求背景三：用于服务端渲染")]),_._v(" "),e("p",[_._v("希望用户可以在"),e("code",[_._v("Node.js")]),_._v("中通过"),e("code",[_._v("require")]),_._v("语句引用资源，例如：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("const Vue = require('vue')\n")])])]),e("p",[_._v("当进行服务端渲染时，"),e("code",[_._v("Vue.js")]),_._v("的代码是在"),e("code",[_._v("Node.js")]),_._v("环境中运行的， 而非浏览器环境。在"),e("code",[_._v("Node.js")]),_._v("环境中，资源的模块格式应该是"),e("code",[_._v("CommonJS")]),_._v(",简称"),e("code",[_._v("cjs")])]),_._v(" "),e("p",[_._v("为了能输出"),e("code",[_._v("cjs")]),_._v(" 模块的资源，我们可以通过修改"),e("code",[_._v("rollup.config.js")]),_._v("的配置"),e("code",[_._v("format:'cjs'")]),_._v("来实现：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("const config = {\n  input:'input.js',\n  output:{\n    file:'output.js',\n    format:'cjs'//指定模块形式\n  }\n}\n\nexport default config\n")])])]),e("h2",{attrs:{id:"_2-5-特性开关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-特性开关"}},[_._v("#")]),_._v(" 2.5 特性开关")]),_._v(" "),e("h3",{attrs:{id:"_1、什么是特性开关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是特性开关"}},[_._v("#")]),_._v(" 1、什么是特性开关？")]),_._v(" "),e("p",[_._v("在设计框架时，框架会给用户提供诸多特性（或功能），例如我们提供A、B、C三个特性给用户，同事还提供了a、b、c三个对应的特性开关，用户可以通过设置a、b、c为true或者false来代表开启或关闭对应的特性，可以带来很多益处：")]),_._v(" "),e("ul",[e("li",[_._v("对于用户关闭的特性， 可以利用"),e("code",[_._v("Tree-Shaking")]),_._v("机制让其不包含在最终的资源中。")]),_._v(" "),e("li",[_._v("为框架设计带来了灵活性，可以通过特性开关任意为框架添加新的特性，而不用担心资源体积变大。")]),_._v(" "),e("li",[_._v("当升级框架时，可以通过特性开关来支持遗留"),e("code",[_._v("API")]),_._v("，这样新用户可以选择不使用遗留"),e("code",[_._v("API")]),_._v("，从而使最终打包资源体积最小化")])]),_._v(" "),e("h3",{attrs:{id:"_2、如何实现特性开关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、如何实现特性开关"}},[_._v("#")]),_._v(" 2、如何实现特性开关？")]),_._v(" "),e("p",[_._v("原理和上文提到的"),e("code",[_._v("__DEV__")]),_._v("常量一样， 本质上是利用"),e("code",[_._v("rollup.js")]),_._v("的预定义常量插件来实现。")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("{\n  __FEATURE_OPTIONS_API__:isBundlerESBuild ? `__VUE_OPTIONS_API__`：true\n}\n")])])]),e("p",[e("code",[_._v("__VUE_OPTIONS_API__")]),_._v(" 类似于"),e("code",[_._v("__DEV__")]),_._v("。在"),e("code",[_._v("Vue.js3")]),_._v("源码中搜索，可以找到很多类似于如下代码的判断分支：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("if(__FEATURE_OPTIONS_API__){\n  currentInstance = instance\n  pauseTracking()\n  applyOptions(instance,Component)\n  resetTracking()\n  currentInstance = null\n}\n")])])]),e("p",[_._v("当"),e("code",[_._v("Vue.js")]),_._v("构建资源时，如果构建的资源是供打包工具使用的（即带有"),e("code",[_._v("-bundler")]),_._v("字样的资源），那么上面 的代码在资源中会变成：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("if(__VUE_OPTIONS_API__){ //注意\n  currentInstance = instance\n  pauseTracking()\n  applyOptions(instance,Component)\n  resetTracking()\n  currentInstance = null\n}\n")])])]),e("p",[_._v("其中"),e("code",[_._v("__VUE_OPTIONS_API__")]),_._v(" 是一个特性开关， 用户可以通过设置"),e("code",[_._v("__VUE_OPTIONS_API__")]),_._v(" 预定义常量的值来控制是否要包含这段代码。")]),_._v(" "),e("p",[_._v("通常用户可以使用"),e("code",[_._v("webpack.DefinePlugin")]),_._v("插件来实现：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("new webpack.DefinePlugin({\n  __VUE_OPTIONS_API__:JSON.stringify(true)// 开启特性\n})\n")])])]),e("p",[e("code",[_._v("__VUE_OPTIONS_API__")]),e("strong",[_._v("开关有什么作用？")])]),_._v(" "),e("ul",[e("li",[_._v("在"),e("code",[_._v("Vue.js2")]),_._v("中，我们编写的组件叫做组件选项"),e("code",[_._v("API")])])]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("export default{\n  data(){}, //data选项\n  computed:{}, //computed选项\n  //其他选项\n}\n")])])]),e("ul",[e("li",[_._v("在"),e("code",[_._v("Vue.js3")]),_._v("中，推荐使用"),e("code",[_._v("Composition API")]),_._v("来编写代码")])]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("export default{\n    setup(){\n      const count = ref(0)\n      const doubleCount = computed(()=> count.value *2) //相当于Vue.js2中的computed选项\n    }\n}\n")])])]),e("p",[_._v("但是为了兼容"),e("code",[_._v("Vue.js2")]),_._v(",在"),e("code",[_._v("Vue.js3")]),_._v("中仍然可以使用选项"),e("code",[_._v("API")]),_._v("的方式编写代码。")]),_._v(" "),e("p",[_._v("如果明确指导自己不会使用选项"),e("code",[_._v("API")]),_._v("，用户就可以使用"),e("code",[_._v("__VUE_OPTIONS_API__")]),_._v(" 开关来关闭该特性，这样在打包的时候"),e("code",[_._v("Vue.js")]),_._v("的这个部分代码就不会包含在最终的资源中，从而减小资源体积。")]),_._v(" "),e("h2",{attrs:{id:"_2-6-错误处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-错误处理"}},[_._v("#")]),_._v(" 2.6 错误处理")]),_._v(" "),e("p",[_._v("错误处理是框架开发过程中非常重要的环节。框架错误处理机制的好坏直接决定了用户应用程序的健壮性，还决定了用户开发时处理错误的心智负担。")]),_._v(" "),e("p",[_._v("为了让大家更加直观地感受错误处理的重要性，我们从一个小例子说起。假设我们开发了一个工具模块，代码如下：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("export default {\n  foo(fn) {\n    fn && fn()\n  }\n}\n")])])]),e("p",[_._v("该模块导出一个对象，其中"),e("code",[_._v("foo")]),_._v("属性是一个两数，接收一个回调函数作为参数，调用"),e("code",[_._v("foo")]),_._v("函数时会执行该回调两数，在用户侧使用时：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("import utils from 'utils.js'\nutils. foo(() => {\n    //...\n})\n")])])]),e("p",[_._v("大家思考一下，如果用户提供的回调两数在执行的时候出错了，怎么办？此时有两个办法，第一个办法是让用户自行处理，这需要用户自己执行"),e("code",[_._v("try ... catch")]),_._v(":")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("import utils from 'utils.js'\n\nutils.foo(()=>{\n  try{\n    //...\n  }catch(e){\n    //...\n  }\n})\n")])])]),e("p",[_._v("但是这会增加用户的负担。试想一下，如果"),e("code",[_._v("utils.js")]),_._v(" 不是仅仅提供了一个"),e("code",[_._v("foo")]),_._v("两数：而是提供了几十上百给类似的函数，那么用户在使用的时候就需要逐一添加错误处理程序。")]),_._v(" "),e("p",[_._v("第二个办法是我们代替用户统一处理错误，如以下代码所示：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("export default {\n  foo(fn) {\n    try {\n      fn && fn()\n    }catch(e) {/* .. */}\n  },\n  bar(fn) {\n    try {\n      fn && fn()\n    }catch(e) {/* .. */}\n  },\n}\n")])])]),e("p",[_._v("在每个函数内都增加"),e("code",[_._v("try…catch")]),_._v("代码块，实际上，我们可以进步将错误处理程序封装为一个函数，假设叫它"),e("code",[_._v("callWithErrorHandling")]),_._v(":")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("export default {\n  foo(fn) {\n    callWithErrorHanding(fn)\n  },\n  bar(fn) {\n    callWithErrorHanding(fn)\n  },\n}\n\nfunction callWithErrorHanding(fn){\n    try {\n      fn && fn()\n    }catch(e) {\n      console.log(e)\n    }\n}\n")])])]),e("p",[_._v("可以看到，代码变得简洁多了了。但简洁不是目的，这么做真正的好处是，我们能为用户提供统一的错误处理接口，如下所示：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("let handleError = null\nexport default{\n  foo(fn) {\n    callwithErrorHandling(fn)\n  },\n  //用户可以调用该函数注册统一的錯误处理函数\n  registerErrorHandler(fn){\n    handleError = fn\n  }\n},\n  \nfunction callwithErrorHandling(fn){\n  try {\n    fn && fn()\n  } catch (e) {\n    // 将捕获到的错误传递给用户的错误处理程序\n    handleError(e)\n  }\n}\n")])])]),e("p",[_._v("我们提供了 "),e("code",[_._v("registerErrorHandler")]),_._v(" 函数数，用户可以使用它注册错误处理程序，然后在"),e("code",[_._v("callMithErrorlHandling")]),_._v(" 函数肉部捕获错误后，把错误传递给用户注册的错误处理程序。")]),_._v(" "),e("p",[_._v("这样用户侧的代码就会非常简洁且健壮：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("import utils from 'utils.is'\n  // 注册错误处理程序\nutils.registerErrorHandler((e)=>{\n  console. log(e)\n})\nutils.foo(() => {/*...*/})\nutils. bar(() => {/*...*/})\n")])])]),e("p",[_._v("这时错误处理的能力完全由用户控制，用户既可以选择忽略错误，也可以调用上报程序将错误上报给监控系统。")]),_._v(" "),e("p",[_._v("实际上，这就是"),e("code",[_._v("Vue.is")]),_._v("错误处理的原理，你可以在源码中搜素到 "),e("code",[_._v("calWWithErrorHandling")]),_._v(" 函数。另外，在"),e("code",[_._v("Vuejs")]),_._v("中，我们也可以注册统一的错误处理函数：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("import App from 'App.vue'\nconst app = createApp (App)\napp.config.errorHandter = ()=>{\n  //错误处理程序\n}\n")])])]),e("h2",{attrs:{id:"_2-7-良好的typescript类型支持"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-良好的typescript类型支持"}},[_._v("#")]),_._v(" 2.7 良好的TypeScript类型支持")]),_._v(" "),e("p",[_._v("TypeScript是由微软开源的编程语言，简称TS它是 JavaSeript的超集，能够为 JavaScript提供类型支持。现在越来越多的开发者和团队在项目中使用TS。")]),_._v(" "),e("p",[_._v("使用TS的好处有很生，如代码即文档、编辑器自动提示、一定程度上能够避免低级 bug、代码的可维护性更强等。因此对 TS 类型的支持是否完善也成为评价一个框架的重要指标。")]),_._v(" "),e("p",[_._v("如何衡量一个框架对TS类型支持水平？ 这里有一个常见的误区， 很多读者以为只要是使用TS编写框架， "),e("strong",[_._v("就等价于对TS类型支持友好，其实这是两件完全不同的事。")])]),_._v(" "),e("hr"),_._v(" "),e("p",[e("strong",[_._v("举例子：")])]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("function fooo(val:any){\n  return val\n}\n")])])]),e("p",[_._v("这个函数很简单，它接收参数"),e("code",[_._v("val")]),_._v("并且该参数可以是任意类型（any)，该两数直接将参数作为返回值，这说明返回值的类型是由参数决定的，如果参数是"),e("code",[_._v("number")]),_._v(" 类型，那么返回值也是"),e("code",[_._v("number")]),_._v("类型。")]),_._v(" "),e("p",[_._v("然后我们尝试使用一下这个函数数，如图所示:")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2aba713969e4f59a21c483b8729a37f~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),_._v(" "),e("p",[_._v("在调用 "),e("code",[_._v("fooo")]),_._v(" 两数时，我们传递了一个字符串类型的参数，"),e("code",[_._v('"str"')]),_._v("，按照之前的分析，得到的结果"),e("code",[_._v("reso")]),_._v(" 的类型应该也是字符串类型，然而当我们把鼠标指针悬浮到"),e("code",[_._v("reso")]),_._v(" 常量上时，可以看到其类型是"),e("code",[_._v("any")]),_._v("，这并不是我们想要的结果。")]),_._v(" "),e("p",[_._v("为了达到理想状态，我们只需要对 "),e("code",[_._v("fooo")]),_._v(" 两数做简单的修改即可：")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("function fooo<T extends any>(val:T):T{\n  return val\n}\n")])])]),e("p",[_._v("再来看现在的表现，如图所示：")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2272d26ba4134367846d34a8c40c83af~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),_._v(" "),e("p",[_._v("可以看到，"),e("code",[_._v("reso")]),_._v(" 的类型是字符字面量"),e("code",[_._v('"str"')]),_._v("而不是 "),e("code",[_._v("any")]),_._v(" 了，这说明我们的代码生效了。")]),_._v(" "),e("p",[_._v("通过这个简单的例子我们认识到，使用"),e("code",[_._v("TS编写代码")]),_._v("与对"),e("code",[_._v("TS 类型支持友好")]),_._v("是两件事。")]),_._v(" "),e("p",[_._v("在编写大型框架时，想要做到完善的"),e("code",[_._v("TS")]),_._v("类型支持很不容易，大家可以查看 "),e("code",[_._v("Vuejs")]),_._v("源码中的 "),e("code",[_._v("runtime-core/src/apiDefineComponent.ts")]),_._v("文件，整个文件里真正会在浏览器中运行的代码其实只有3行，但是")]),_._v(" "),e("p",[_._v("全部的代码接近200行，其实这些代码都是在为类型支持服务。由此可见，框架想要做到完善的类型支持，需要付出相当大的努力。")]),_._v(" "),e("p",[_._v("除了要花大力气做类型推导，从而做到更好的类型支持外，还要考虑对 TSX 的支持，后续章节会详细讨论这部分内容。")]),_._v(" "),e("h1",{attrs:{id:"三、总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、总结"}},[_._v("#")]),_._v(" 三、总结")]),_._v(" "),e("h2",{attrs:{id:"_1、框架设计中关于开发体验"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、框架设计中关于开发体验"}},[_._v("#")]),_._v(" 1、框架设计中关于开发体验")]),_._v(" "),e("p",[_._v("开发体验是衡量一个框架的重要指标之一。提供友好的警告信息至关重要，这有助于开发者快速定位问题。")]),_._v(" "),e("p",[_._v("因为大多情况下“框架”要比开发者更清楚问题出在哪里，因此在框架层面抛出有意义的警告信息是非常有必要。")]),_._v(" "),e("h2",{attrs:{id:"_2、解决框架体积过大tree-shaking机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、解决框架体积过大tree-shaking机制"}},[_._v("#")]),_._v(" 2、解决框架体积过大Tree-Shaking机制")]),_._v(" "),e("p",[_._v("提供的警告信息越详细， 就意味着框架体积越大。因此，为了框架体积不受警告信息的影响，我们需要利用Tree-Shaking机制。来配合构建工具预定义常量的能力。")]),_._v(" "),e("p",[_._v("例如：定义 "),e("code",[_._v("__DEV__")]),_._v("常量，从而实现仅在开发环境中打印警告信息，而生产环境中则不包含这些用于提升开发体验的代码，从而实现线上代码体积的可控性。")]),_._v(" "),e("p",[e("code",[_._v("Tree-Shaking")]),_._v("是一种排除 "),e("code",[_._v("dead code")]),_._v("的机制，框架中会内建多种能力， 例如："),e("code",[_._v("Vue.js")]),_._v(" 内建的组件等。")]),_._v(" "),e("ul",[e("li",[_._v("对于用户可能用不到的能力， 我们可以利用"),e("code",[_._v("Tree-Shaking")]),_._v(" 机制使最终打包的代码体积最小化。")]),_._v(" "),e("li",[e("code",[_._v("Tree-Shaking")]),_._v("本身基于"),e("code",[_._v("ESM")]),_._v(",并且"),e("code",[_._v("JavaScript")]),_._v("是一门动态语言，通过纯静态分析的手段进行"),e("code",[_._v("Tree-Shaking")]),_._v("难度较大， 因此大部分工具能够识别"),e("code",[_._v("/*#__PURE__*/")]),_._v("注释")]),_._v(" "),e("li",[_._v("在编写框架代码时，我们可以利用"),e("code",[_._v("/*#__PURE__*/")]),_._v(" 来辅助构建工具进行"),e("code",[_._v("Tree-Shaking")])])]),_._v(" "),e("h2",{attrs:{id:"_3、框架输出产物"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、框架输出产物"}},[_._v("#")]),_._v(" 3、框架输出产物")]),_._v(" "),e("p",[_._v("不同类型的产物是为了满足不同的需求。")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("为了让用户能够通过"),e("code",[_._v("<script>")]),_._v("标签直接引用并使用， 我们需要输出"),e("code",[_._v("IIFE")]),_._v("格式的资源，即立即调用的函数表达式。")])]),_._v(" "),e("li",[e("p",[_._v("为了让用户能够通过"),e("code",[_._v('<script type="module">')]),_._v(" 引用并使用，我们需要输出"),e("code",[_._v("ESM")]),_._v("格式的资源。")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("ESM格式的资源有两种：")]),_._v(" "),e("ul",[e("li",[_._v("用于浏览器的"),e("code",[_._v("esm-browers.js")])]),_._v(" "),e("li",[_._v("用于打包工具的"),e("code",[_._v("esm-bundler.js")])])])])])]),_._v(" "),e("li",[e("p",[_._v("两者资源区别在于对预定义常量"),e("code",[_._v("__DEV__")]),_._v(" 的处理：")]),_._v(" "),e("ul",[e("li",[_._v("用于浏览器的直接将 "),e("code",[_._v("__DEV__")]),_._v(" 常量替换为字面量"),e("code",[_._v("true")]),_._v(" 或"),e("code",[_._v("false")])]),_._v(" "),e("li",[_._v("用于打包工具的则将"),e("code",[_._v("__DEV__")]),_._v(" 替换为"),e("code",[_._v("process.env.NODE_ENV !== 'production'")]),_._v("语句")])])])]),_._v(" "),e("h2",{attrs:{id:"_4、框架会提供多种能力或功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、框架会提供多种能力或功能"}},[_._v("#")]),_._v(" 4、框架会提供多种能力或功能")]),_._v(" "),e("p",[_._v("有时出于灵活性和兼容性的考虑，对于同样的任务， 框架提供了两种解决方案。")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("Vue.js")]),_._v(" 中的选项对象式"),e("code",[_._v("API")]),_._v("和组合式"),e("code",[_._v("API")]),_._v(" 都能用来完成页面的开发， 两者虽然不互斥，但从框架设计的角度来看， 这完全是基于兼容性的考虑。")]),_._v(" "),e("li",[_._v("有时用户明确知道自己仅会使用组合式"),e("code",[_._v("API")]),_._v(",而不会使用选项对象式"),e("code",[_._v("API")]),_._v(",这时用户可以通过特性开关关闭对应的特性，这样在打包的时候， 用于实现关闭功能的代码将会被"),e("code",[_._v("Tree-Shaking")]),_._v("机制排除。")])]),_._v(" "),e("h2",{attrs:{id:"_5、程序的健壮性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、程序的健壮性"}},[_._v("#")]),_._v(" 5、程序的健壮性")]),_._v(" "),e("p",[_._v("框架的错误处理做得好坏直接决定了用户应用程序的健壮性，同时还决定了用户开发应用时处理错误的心智负担。")]),_._v(" "),e("p",[_._v("框架需要为用户提供统一的错误处理接口，这样用户可以通过注册自定义的错误处理函数来处理全部的框架异常。")]),_._v(" "),e("h2",{attrs:{id:"_6、认知误区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6、认知误区"}},[_._v("#")]),_._v(" 6、认知误区")]),_._v(" "),e("p",[_._v("“使用TS编写框架和框架对TS类型支持友好是两件完全不同的事。”")]),_._v(" "),e("p",[_._v("有时候为了让框架提供更加友好的类型支持， 甚至要花费比实现框架功能本身更多的时间和精力。")])])}),[],!1,null,null,null);e.default=t.exports}}]);